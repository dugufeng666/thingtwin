/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../../_chunks/dep-e32fd926.mjs';
import { isVNode, defineComponent, ref, watch, createVNode } from 'vue';
import { upperCase } from 'lodash-es';
import props from '../../props.mjs';
import { F as FORMATS } from '../../../_chunks/dep-4aa6a006.mjs';
import { Select, Option } from '../../../select/index.mjs';
import FormatInputs from './inputs.mjs';
import { useBaseClassName } from '../../hooks/index.mjs';
import '../../../_chunks/dep-488f17e4.mjs';
import '../../../select/select.mjs';
import '../../../_chunks/dep-7c806dae.mjs';
import '../../../_chunks/dep-fdffc704.mjs';
import '../../../_chunks/dep-39bc09f2.mjs';
import '../../../_chunks/dep-2124b297.mjs';
import '../../../_chunks/dep-113544a7.mjs';
import '../../../_chunks/dep-ab7207a5.mjs';
import '../../../common-components/fake-arrow.mjs';
import '../../../hooks/useConfig.mjs';
import '../../../config-provider/hooks/useConfig.mjs';
import '../../../config-provider/utils/context.mjs';
import '../../../_chunks/dep-039819d3.mjs';
import '../../../_chunks/dep-dd3530fb.mjs';
import '../../../_chunks/dep-eb5cf880.mjs';
import '../../../select-input/index.mjs';
import '../../../select-input/select-input.mjs';
import '../../../popup/index.mjs';
import '../../../popup/popup.mjs';
import '@popperjs/core';
import '../../../hooks/index.mjs';
import '../../../hooks/icon.mjs';
import '../../../hooks/slot.mjs';
import '../../../utils/render-tnode.mjs';
import '../../../_chunks/dep-8543d432.mjs';
import '../../../hooks/useCommonClassName.mjs';
import '../../../hooks/useDefaultValue.mjs';
import '../../../hooks/useDestroyOnClose.mjs';
import '../../../hooks/useKeepAnimation.mjs';
import '../../../hooks/useRipple.mjs';
import '../../../_chunks/dep-62fc4108.mjs';
import '../../../hooks/useVirtualScroll.mjs';
import '../../../hooks/useVModel.mjs';
import '../../../hooks/useImagePreviewUrl.mjs';
import '../../../_chunks/dep-6c2db117.mjs';
import '../../../_chunks/dep-c43dcdde.mjs';
import '../../../utils/dom.mjs';
import '../../../popup/container.mjs';
import '../../../popup/props.mjs';
import '../../../hooks/useResizeObserver.mjs';
import '../../../utils/withInstall.mjs';
import './style/css.mjs';
import '../../../select-input/props.mjs';
import '../../../select-input/hooks/index.mjs';
import '../../../select-input/hooks/useMultiple.mjs';
import '../../../tag-input/index.mjs';
import '../../../tag-input/tag-input.mjs';
import 'tdesign-icons-vue-next';
import '../../../input/index.mjs';
import '../../../input/input.mjs';
import '../../../input/props.mjs';
import '../../../hooks/useDisabled.mjs';
import '../../../hooks/useReadonly.mjs';
import '../../../hooks/useGlobalIcon.mjs';
import '../../../input/hooks/index.mjs';
import '../../../input/hooks/useInput.mjs';
import '../../../form/consts/index.mjs';
import '../../../input/hooks/useLengthLimit.mjs';
import '../../../_chunks/dep-dd1badd6.mjs';
import '../../../_chunks/dep-e3b99a8c.mjs';
import '../../../input/hooks/useInputEventHandler.mjs';
import '../../../input/hooks/useInputWidth.mjs';
import '../../../input/input-group.mjs';
import '../../../input/input-group-props.mjs';
import '../../../tag-input/props.mjs';
import '../../../tag-input/hooks/index.mjs';
import '../../../tag-input/hooks/useDragSorter.mjs';
import '../../../tag-input/hooks/useHover.mjs';
import '../../../tag-input/hooks/useTagScroll.mjs';
import '../../../tag-input/hooks/useTagList.mjs';
import '../../../tag/index.mjs';
import '../../../tag/tag.mjs';
import '../../../_chunks/dep-6a844612.mjs';
import '../../../tag/props.mjs';
import '../../../tag/check-tag.mjs';
import '../../../tag/check-tag-props.mjs';
import '../../../_chunks/dep-762112ef.mjs';
import '../../../tag/check-tag-group.mjs';
import '../../../tag/check-tag-group-props.mjs';
import '../../../loading/index.mjs';
import '../../../loading/directive.mjs';
import '../../../loading/plugin.mjs';
import '../../../loading/loading.mjs';
import '../../../loading/icon/gradient.mjs';
import '../../../hooks/useTeleport.mjs';
import '../../../loading/props.mjs';
import '../../../select-input/hooks/useOverlayInnerStyle.mjs';
import '../../../select-input/hooks/useSingle.mjs';
import '../../../select/select-panel.mjs';
import '../../../select/option.mjs';
import '../../../select/option-props.mjs';
import '../../../checkbox/index.mjs';
import '../../../checkbox/checkbox.mjs';
import '../../../checkbox/props.mjs';
import '../../../checkbox/consts/index.mjs';
import '../../../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../../../_chunks/dep-89acd0df.mjs';
import '../../../checkbox/hooks/useKeyboardEvent.mjs';
import '../../../checkbox/group.mjs';
import '../../../checkbox/checkbox-group-props.mjs';
import '../../../select/utils/index.mjs';
import '../../../select/consts/index.mjs';
import '../../../select/option-group.mjs';
import '../../../select/option-group-props.mjs';
import '../../../select/props.mjs';
import '../../../select/hooks/usePanelVirtualScroll.mjs';
import '../../../select/hooks/index.mjs';
import '../../../select/hooks/useKeyboardControl.mjs';
import '../../../select/hooks/useSelectOptions.mjs';
import '../../utils/index.mjs';
import '../../../_chunks/dep-4b507080.mjs';
import '../../../input-number/index.mjs';
import '../../../input-number/input-number.mjs';
import '../../../button/index.mjs';
import '../../../button/button.mjs';
import '../../../button/props.mjs';
import '../../../input-number/props.mjs';
import '../../../input-number/hooks/useInputNumber.mjs';
import '../../../_chunks/dep-be6fecaf.mjs';
import '../../../_chunks/dep-a007dd7c.mjs';
import './config.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var FormatPanel = defineComponent({
  name: "FormatPanel",
  inheritAttrs: false,
  props: _objectSpread(_objectSpread({}, props), {}, {
    color: {
      type: Object
    },
    onModeChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    },
    onInputChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  }),
  setup: function setup(props2) {
    var baseClassName = useBaseClassName();
    var formatModel = ref(props2.format);
    watch(function () {
      return [props2.format];
    }, function () {
      return formatModel.value = props2.format;
    });
    var handleModeChange = function handleModeChange(v) {
      formatModel.value = v;
      props2.onModeChange(v);
    };
    return function () {
      var _slot;
      var newProps = _objectSpread(_objectSpread({}, props2), {}, {
        format: formatModel.value
      });
      var selectInputProps = _objectSpread({}, props2.selectInputProps || {});
      return createVNode("div", {
        "class": "".concat(baseClassName.value, "__format")
      }, [createVNode("div", {
        "class": "".concat(baseClassName.value, "__format--item")
      }, [createVNode(Select, {
        "size": "small",
        "class": "".concat(baseClassName.value, "__format-mode-select"),
        "selectInputProps": _objectSpread({}, selectInputProps),
        "popupProps": _objectSpread({
          overlayClassName: "".concat(baseClassName.value, "__select-options")
        }, selectInputProps.popupProps),
        "modelValue": formatModel.value,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return formatModel.value = $event;
        },
        "onChange": handleModeChange
      }, _isSlot(_slot = FORMATS.map(function (item) {
        return createVNode(Option, {
          "key": item,
          "value": item,
          "label": upperCase(item),
          "style": {
            fontSize: "12px"
          }
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })]), createVNode("div", {
        "class": "".concat(baseClassName.value, "__format--item")
      }, [createVNode(FormatInputs, newProps, null)])]);
    };
  }
});

export { FormatPanel as default };
//# sourceMappingURL=index.mjs.map
