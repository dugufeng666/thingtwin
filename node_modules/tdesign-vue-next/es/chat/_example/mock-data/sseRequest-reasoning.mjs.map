{"version":3,"file":"sseRequest-reasoning.mjs","sources":["../../../../../components/chat/_example/mock-data/sseRequest-reasoning.ts"],"sourcesContent":["export class MockSSEResponse {\n  private controller!: ReadableStreamDefaultController<Uint8Array>;\n  private encoder = new TextEncoder();\n  private stream: ReadableStream<Uint8Array>;\n  private error: boolean;\n  private currentPhase: 'reasoning' | 'content' = 'reasoning';\n\n  constructor(\n    private data: {\n      reasoning: string; // 推理内容\n      content: string; // 正式内容\n    },\n    private delay: number = 100,\n    error = false,\n  ) {\n    this.error = error;\n\n    this.stream = new ReadableStream({\n      start: (controller) => {\n        this.controller = controller;\n        if (!this.error) {\n          // 如果不是错误情况，则开始推送数据\n          setTimeout(() => this.pushData(), this.delay); // 延迟开始推送数据\n        }\n      },\n      cancel() {},\n    });\n  }\n\n  private pushData() {\n    try {\n      if (this.currentPhase === 'reasoning') {\n        // 推送推理内容\n        if (this.data.reasoning.length > 0) {\n          const chunk = JSON.stringify({\n            delta: {\n              reasoning_content: this.data.reasoning.slice(0, 1),\n              content: '',\n            },\n            finished: false,\n          });\n          this.controller.enqueue(this.encoder.encode(chunk));\n          this.data.reasoning = this.data.reasoning.slice(1);\n          // 设置下次推送\n          setTimeout(() => this.pushData(), this.delay);\n        } else {\n          // 推理内容推送完成，切换到正式内容\n          this.currentPhase = 'content';\n          setTimeout(() => this.pushData(), this.delay); // 立即开始推送正式内容\n          return;\n        }\n      }\n\n      if (this.currentPhase === 'content') {\n        // 推送正式内容\n        if (this.data.content.length > 0) {\n          const chunk = JSON.stringify({\n            delta: {\n              reasoning_content: '',\n              content: this.data.content.slice(0, 1),\n            },\n            finished: this.data.content.length === 1, // 最后一个字符时标记完成\n          });\n          this.controller.enqueue(this.encoder.encode(chunk));\n          this.data.content = this.data.content.slice(1);\n\n          // 设置下次推送\n          setTimeout(() => this.pushData(), this.delay);\n        } else {\n          // const finalPayload = JSON.stringify({\n          //   delta: {\n          //     reasoning_content: '',\n          //     content: '',\n          //   },\n          //   finished: true,\n          // });\n          // this.controller.enqueue(this.encoder.encode(`${finalPayload}`));\n          // 全部内容推送完成\n          setTimeout(() => this.controller.close(), this.delay);\n          return;\n        }\n      }\n    } catch {}\n  }\n\n  getResponse(): Promise<Response> {\n    return new Promise((resolve) => {\n      // 使用setTimeout来模拟网络延迟\n      setTimeout(() => {\n        if (this.error) {\n          const errorResponseOptions = { status: 500, statusText: 'Internal Server Error' };\n\n          // 返回模拟的网络错误响应，这里我们使用500状态码作为示例\n          resolve(new Response(null, errorResponseOptions));\n        } else {\n          resolve(new Response(this.stream));\n        }\n      }, this.delay); // 使用构造函数中设置的delay值作为延迟时间\n    });\n  }\n}\n"],"names":["MockSSEResponse","data","_this","delay","arguments","length","undefined","error","_classCallCheck","_defineProperty","TextEncoder","stream","ReadableStream","start","controller","setTimeout","pushData","cancel","_createClass","key","value","_this2","currentPhase","reasoning","chunk","JSON","stringify","delta","reasoning_content","slice","content","finished","enqueue","encoder","encode","close","_unused","getResponse","_this3","Promise","resolve","errorResponseOptions","status","statusText","Response"],"mappings":"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"}