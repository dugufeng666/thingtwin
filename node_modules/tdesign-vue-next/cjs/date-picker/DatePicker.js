/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var dayjs = require('dayjs');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var hooks_tnode = require('../_chunks/dep-db9cff9c.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useDisabled = require('../hooks/useDisabled.js');
var hooks_useGlobalIcon = require('../hooks/useGlobalIcon.js');
var datePicker_hooks_useSingle = require('./hooks/useSingle.js');
var format = require('../_chunks/dep-b2d19853.js');
var utils = require('../_chunks/dep-6591f5fe.js');
var datePicker_props = require('./props.js');
var selectInput_index = require('../select-input/index.js');
var datePicker_components_panel_SinglePanel = require('./components/panel/SinglePanel.js');
var hooks_useReadonly = require('../hooks/useReadonly.js');
var configProvider_hooks_useConfig = require('../config-provider/hooks/useConfig.js');
var _baseGetTag = require('../_chunks/dep-fa2fda14.js');
var isObjectLike = require('../_chunks/dep-5247a460.js');
var _baseUnary = require('../_chunks/dep-c3bc048f.js');
var _overArg = require('../_chunks/dep-564b3613.js');
var isFunction = require('../_chunks/dep-4bb500b8.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-0e58cbbd.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-12a3fd02.js');
require('../_chunks/dep-a76126df.js');
require('../_chunks/dep-3a1cfa95.js');
require('../_chunks/dep-6441bda0.js');
require('../_chunks/dep-54b7116c.js');
require('../_chunks/dep-36b83f83.js');
require('../_chunks/dep-e2633705.js');
require('../_chunks/dep-0b6e5f33.js');
require('../_chunks/dep-3c0d3dc9.js');
require('../_chunks/dep-5472dcbf.js');
require('../_chunks/dep-1c142d75.js');
require('../_chunks/dep-4479843a.js');
require('../_chunks/dep-c1b17346.js');
require('../_chunks/dep-84a0e81d.js');
require('../_chunks/dep-11fc6f95.js');
require('../_chunks/dep-1e4a8214.js');
require('@babel/runtime/helpers/defineProperty');
require('./hooks/useSingleValue.js');
require('@babel/runtime/helpers/slicedToArray');
require('../hooks/useVModel.js');
require('../_chunks/dep-b381bc1a.js');
require('../_chunks/dep-2debdee8.js');
require('../_chunks/dep-99110617.js');
require('../_chunks/dep-5e2171e6.js');
require('../_chunks/dep-ce3eb768.js');
require('../_chunks/dep-00f18931.js');
require('../_chunks/dep-58abd685.js');
require('../_chunks/dep-3a0b641f.js');
require('../_chunks/dep-94fa6b5d.js');
require('../_chunks/dep-f0a744e5.js');
require('../_chunks/dep-89cb0bb6.js');
require('../_chunks/dep-d0783150.js');
require('../_chunks/dep-dee45c79.js');
require('../_chunks/dep-41ef4b47.js');
require('../_chunks/dep-10d5d599.js');
require('../_chunks/dep-75a87f7c.js');
require('../_chunks/dep-7bb1a236.js');
require('@babel/runtime/helpers/objectDestructuringEmpty');
require('@babel/runtime/helpers/extends');
require('../_chunks/dep-9405554f.js');
require('../_chunks/dep-b5ec465c.js');
require('../_chunks/dep-9e87e1e1.js');
require('../select-input/select-input.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@popperjs/core');
require('../hooks/useKeepAnimation.js');
require('../_chunks/dep-ede16f7f.js');
require('../_chunks/dep-1d38e864.js');
require('../_chunks/dep-e6692a32.js');
require('../_chunks/dep-0290afd5.js');
require('../utils/dom.js');
require('../popup/container.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../popup/props.js');
require('../hooks/useResizeObserver.js');
require('../_chunks/dep-7f787fb7.js');
require('../utils/withInstall.js');
require('../_chunks/dep-fcea8340.js');
require('../select-input/props.js');
require('../select-input/hooks/useMultiple.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../tag-input/index.js');
require('../tag-input/tag-input.js');
require('../input/index.js');
require('../input/input.js');
require('../input/props.js');
require('../input/hooks/useInput.js');
require('../form/consts/index.js');
require('../input/hooks/useLengthLimit.js');
require('../_chunks/dep-ce66c261.js');
require('../_chunks/dep-6bdaf809.js');
require('../_chunks/dep-19f6d038.js');
require('../_chunks/dep-272b1445.js');
require('../input/hooks/useInputEventHandler.js');
require('../input/hooks/useInputWidth.js');
require('../input/input-group.js');
require('../input/input-group-props.js');
require('../tag-input/props.js');
require('../tag-input/hooks/useDragSorter.js');
require('../tag-input/hooks/useHover.js');
require('../tag-input/hooks/useTagScroll.js');
require('../tag-input/hooks/useTagList.js');
require('../tag/index.js');
require('../tag/tag.js');
require('tinycolor2');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../_chunks/dep-d1e9ac5b.js');
require('../tag/check-tag-group.js');
require('../tag/check-tag-group-props.js');
require('../hooks/useDefaultValue.js');
require('../loading/index.js');
require('../_chunks/dep-14125703.js');
require('../loading/plugin.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../hooks/useTeleport.js');
require('../loading/props.js');
require('../_chunks/dep-9ab88918.js');
require('../_chunks/dep-425a3c77.js');
require('../_chunks/dep-449af6ce.js');
require('../_chunks/dep-13bdf55b.js');
require('../_chunks/dep-c8867018.js');
require('../_chunks/dep-350b64b1.js');
require('../select-input/hooks/useOverlayInnerStyle.js');
require('../select-input/hooks/useSingle.js');
require('../_chunks/dep-e88b64f3.js');
require('../_chunks/dep-803e78c6.js');
require('./components/panel/PanelContent.js');
require('./components/base/Header.js');
require('../pagination/index.js');
require('../pagination/pagination.js');
require('../input-number/index.js');
require('../input-number/input-number.js');
require('../button/index.js');
require('../button/button.js');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../input-number/props.js');
require('../input-number/hooks/useInputNumber.js');
require('../hooks/useCommonClassName.js');
require('../_chunks/dep-279ff7b9.js');
require('../_chunks/dep-2b0b7f56.js');
require('../select/index.js');
require('../select/select.js');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('../common-components/fake-arrow.js');
require('../select/select-panel.js');
require('../select/option.js');
require('../select/option-props.js');
require('../checkbox/index.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../checkbox/consts/index.js');
require('../checkbox/hooks/useCheckboxLazyLoad.js');
require('../_chunks/dep-8c390b09.js');
require('../checkbox/hooks/useKeyboardEvent.js');
require('../checkbox/group.js');
require('../checkbox/checkbox-group-props.js');
require('../hooks/slot.js');
require('../_chunks/dep-e2429209.js');
require('../_chunks/dep-6d957e14.js');
require('../select/utils/index.js');
require('../select/consts/index.js');
require('../select/option-group.js');
require('../select/option-group-props.js');
require('../select/props.js');
require('../select/hooks/usePanelVirtualScroll.js');
require('../hooks/useVirtualScroll.js');
require('../select/hooks/useKeyboardControl.js');
require('../select/hooks/useSelectOptions.js');
require('../input-adornment/index.js');
require('../input-adornment/input-adornment.js');
require('../input-adornment/props.js');
require('../pagination/props.js');
require('../pagination/hooks/useMoreAction.js');
require('../pagination/hooks/usePaginationClasses.js');
require('../pagination/pagination-mini.js');
require('../pagination/pagination-mini-props.js');
require('./components/base/Table.js');
require('./components/base/Cell.js');
require('../time-picker/panel/time-picker-panel.js');
require('../_chunks/dep-b02ae55d.js');
require('../time-picker/props.js');
require('../_chunks/dep-f8e689e8.js');
require('./components/panel/ExtraContent.js');
require('./components/base/Footer.js');
require('./hooks/useDisableDate.js');
require('./hooks/useTableData.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

/** `Object#toString` result references. */
var dateTag = '[object Date]';

/**
 * The base implementation of `_.isDate` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 */
function baseIsDate(value) {
  return isObjectLike.isObjectLike(value) && _baseGetTag.baseGetTag(value) == dateTag;
}

/* Node.js helper references. */
var nodeIsDate = _overArg.nodeUtil && _overArg.nodeUtil.isDate;

/**
 * Checks if `value` is classified as a `Date` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 * @example
 *
 * _.isDate(new Date);
 * // => true
 *
 * _.isDate('Mon April 23 2012');
 * // => false
 */
var isDate = nodeIsDate ? _baseUnary.baseUnary(nodeIsDate) : baseIsDate;
var isDate$1 = isDate;

var _DatePicker = Vue.defineComponent({
  name: "TDatePicker",
  props: datePicker_props["default"],
  setup: function setup(props2) {
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("date-picker");
    var _useSingle = datePicker_hooks_useSingle.useSingle(props2),
      inputValue = _useSingle.inputValue,
      popupVisible = _useSingle.popupVisible,
      inputProps = _useSingle.inputProps,
      popupProps = _useSingle.popupProps,
      isHoverCell = _useSingle.isHoverCell,
      cacheValue = _useSingle.cacheValue,
      value = _useSingle.value,
      year = _useSingle.year,
      month = _useSingle.month,
      time = _useSingle.time,
      inputRef = _useSingle.inputRef,
      onChange = _useSingle.onChange;
    var disabled = hooks_useDisabled.useDisabled();
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var _useConfig = configProvider_hooks_useConfig.useConfig("datePicker"),
      globalConfig = _useConfig.globalConfig;
    var isReadOnly = hooks_useReadonly.useReadonly();
    var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
        CalendarIcon: tdesignIconsVueNext.CalendarIcon
      }),
      CalendarIcon = _useGlobalIcon.CalendarIcon;
    var formatRef = Vue.computed(function () {
      return format.getDefaultFormat({
        mode: props2.mode,
        format: props2.format,
        valueType: props2.valueType,
        enableTimePicker: props2.multiple ? false : props2.enableTimePicker
      });
    });
    var valueDisplayParams = Vue.computed(function () {
      return {
        value: value.value,
        displayValue: inputValue.value
      };
    });
    Vue.watch(popupVisible, function (visible) {
      var _formatRef$value;
      if (props2.multiple) return;
      if (!props2.needConfirm && props2.enableTimePicker && !visible) {
        var nextValue = format.formatDate(inputValue.value, {
          format: formatRef.value.format
        });
        if (nextValue) {
          onChange === null || onChange === void 0 || onChange(format.formatDate(inputValue.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: format.parseToDayjs(inputValue.value, formatRef.value.format),
            trigger: "confirm"
          });
        } else {
          inputValue.value = format.formatDate(value.value, {
            format: formatRef.value.format
          });
        }
      }
      var dateValue = value.value && !isDate$1(value.value) && !["week", "quarter"].includes(props2.mode) ? utils.covertToDate(value.value, (_formatRef$value = formatRef.value) === null || _formatRef$value === void 0 ? void 0 : _formatRef$value.valueType) : value.value;
      cacheValue.value = format.formatDate(dateValue, {
        format: formatRef.value.valueType,
        targetFormat: formatRef.value.format
      });
      inputValue.value = format.formatDate(dateValue, {
        format: formatRef.value.valueType,
        targetFormat: formatRef.value.format
      });
      if (visible) {
        year.value = format.parseToDayjs(value.value, formatRef.value.valueType).year();
        month.value = format.parseToDayjs(value.value, formatRef.value.format).month();
        time.value = format.formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props2.defaultTime);
      } else {
        isHoverCell.value = false;
      }
    });
    function onCellMouseEnter(date) {
      if (props2.multiple) return;
      isHoverCell.value = true;
      inputValue.value = format.formatDate(date, {
        format: formatRef.value.format
      });
    }
    function onCellMouseLeave() {
      if (props2.multiple) return;
      isHoverCell.value = false;
      inputValue.value = format.formatDate(cacheValue.value, {
        format: formatRef.value.format
      });
    }
    function onCellClick(date) {
      var _props2$onPick;
      isHoverCell.value = false;
      if (props2.mode === "date") {
        year.value = date.getFullYear();
        month.value = date.getMonth();
      }
      if (props2.enableTimePicker) {
        cacheValue.value = format.formatDate(date, {
          format: formatRef.value.format
        });
      } else {
        if (props2.multiple) {
          var newDate = processDate(date);
          onChange(newDate, {
            dayjsValue: format.parseToDayjs(date, formatRef.value.format),
            trigger: "pick"
          });
          return;
        }
        onChange === null || onChange === void 0 || onChange(format.formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: format.parseToDayjs(date, formatRef.value.format),
          trigger: "pick"
        });
        popupVisible.value = false;
      }
      (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 || _props2$onPick.call(props2, date);
    }
    function processDate(date) {
      var isSameDate;
      var currentValue = value.value || [];
      var dayjsLocale = globalConfig.value.dayjsLocale;
      var currentDate;
      if (props2.mode !== "week") isSameDate = currentValue.some(function (val) {
        return utils.isSame(format.parseToDayjs(val, formatRef.value.format).toDate(), date, props2.mode, dayjsLocale);
      });else {
        isSameDate = currentValue.some(function (val) {
          return val === dayjs__default["default"](date).locale(dayjsLocale).format(formatRef.value.format);
        });
      }
      if (!isSameDate) {
        currentDate = currentValue.concat(format.formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }));
      } else {
        currentDate = currentValue.filter(function (val) {
          return format.formatDate(val, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }) !== format.formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          });
        });
      }
      return currentDate;
    }
    function onTagRemoveClick(ctx) {
      var removeDate = dayjs__default["default"](ctx.item).toDate();
      var newDate = processDate(removeDate);
      onChange === null || onChange === void 0 || onChange(newDate, {
        dayjsValue: format.parseToDayjs(removeDate, formatRef.value.format),
        trigger: "tag-remove"
      });
    }
    function onTagClearClick(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      popupVisible.value = false;
      onChange === null || onChange === void 0 || onChange([], {
        dayjsValue: dayjs__default["default"](),
        trigger: "clear"
      });
    }
    function onJumperClick(_ref2) {
      var trigger = _ref2.trigger;
      var monthCountMap = {
        date: 1,
        week: 1,
        month: 12,
        quarter: 12,
        year: 120
      };
      var monthCount = monthCountMap[props2.mode] || 0;
      var current = new Date(year.value, month.value);
      var next = null;
      if (trigger === "prev") {
        next = utils.subtractMonth(current, monthCount);
      } else if (trigger === "current") {
        next = new Date();
      } else if (trigger === "next") {
        next = utils.addMonth(current, monthCount);
      }
      var nextYear = next.getFullYear();
      var nextMonth = next.getMonth();
      year.value = nextYear;
      month.value = nextMonth;
    }
    function onTimePickerChange(val) {
      var _props2$onPick2;
      time.value = val;
      var _extractTimeObj = utils.extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;
      var nextHours = hours;
      if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
      if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
      var currentDate = !dayjs__default["default"](inputValue.value, formatRef.value.format).isValid() ? dayjs__default["default"]() : dayjs__default["default"](inputValue.value, formatRef.value.format);
      var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
      inputValue.value = format.formatDate(nextDate, {
        format: formatRef.value.format
      });
      cacheValue.value = format.formatDate(nextDate, {
        format: formatRef.value.format
      });
      (_props2$onPick2 = props2.onPick) === null || _props2$onPick2 === void 0 || _props2$onPick2.call(props2, nextDate);
    }
    function onConfirmClick(_ref3) {
      var e = _ref3.e;
      var nextValue = format.formatDate(inputValue.value, {
        format: formatRef.value.format
      });
      if (nextValue) {
        var _props2$onConfirm;
        props2 === null || props2 === void 0 || (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
          date: dayjs__default["default"](nextValue).toDate(),
          e: e
        });
        onChange === null || onChange === void 0 || onChange(format.formatDate(inputValue.value, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: format.parseToDayjs(inputValue.value, formatRef.value.format),
          trigger: "confirm"
        });
      } else {
        inputValue.value = format.formatDate(value.value, {
          format: formatRef.value.format
        });
      }
      popupVisible.value = false;
    }
    function onPresetClick(presetValue) {
      var presetVal = isFunction.isFunction(presetValue) ? presetValue() : presetValue;
      onChange === null || onChange === void 0 || onChange(format.formatDate(presetVal, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.valueType
      }), {
        dayjsValue: format.parseToDayjs(presetVal, formatRef.value.format),
        trigger: "preset"
      });
      inputValue.value = format.formatDate(presetVal, {
        format: formatRef.value.format
      });
      popupVisible.value = false;
    }
    function onYearChange(nextYear) {
      year.value = nextYear;
    }
    function onMonthChange(nextMonth) {
      month.value = nextMonth;
    }
    var panelProps = Vue.computed(function () {
      return {
        value: cacheValue.value,
        year: year.value,
        month: month.value,
        format: formatRef.value.format,
        mode: props2.mode,
        presets: props2.presets,
        multiple: props2.multiple,
        time: props2.multiple ? "" : time.value,
        disableDate: props2.disableDate,
        firstDayOfWeek: props2.firstDayOfWeek,
        timePickerProps: props2.timePickerProps,
        enableTimePicker: props2.multiple ? false : props2.enableTimePicker,
        presetsPlacement: props2.presetsPlacement,
        popupVisible: popupVisible.value,
        needConfirm: props2.needConfirm,
        onCellClick: onCellClick,
        onCellMouseEnter: onCellMouseEnter,
        onCellMouseLeave: onCellMouseLeave,
        onJumperClick: onJumperClick,
        onConfirmClick: onConfirmClick,
        onPresetClick: onPresetClick,
        onYearChange: onYearChange,
        onMonthChange: onMonthChange,
        onTimePickerChange: onTimePickerChange,
        onPanelClick: function onPanelClick() {
          var _inputRef$value, _inputRef$value$focus;
          return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 || (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 ? void 0 : _inputRef$value$focus.call(_inputRef$value);
        }
      };
    });
    return function () {
      return Vue.createVNode("div", {
        "class": COMPONENT_NAME.value
      }, [Vue.createVNode(selectInput_index.SelectInput, Vue.mergeProps({
        "borderless": props2.borderless,
        "disabled": disabled.value,
        "value": inputValue.value,
        "label": props2.label,
        "status": props2.status,
        "tips": props2.tips,
        "clearable": props2.clearable,
        "readonly": isReadOnly.value,
        "multiple": props2.multiple,
        "popupProps": popupProps.value,
        "inputProps": inputProps.value,
        "placeholder": props2.placeholder || globalConfig.value.placeholder[props2.mode],
        "popupVisible": !isReadOnly.value && popupVisible.value,
        "valueDisplay": function valueDisplay() {
          return renderTNodeJSX("valueDisplay", {
            params: valueDisplayParams.value
          });
        },
        "needConfirm": props2.needConfirm
      }, props2.selectInputProps, {
        "panel": function panel() {
          return Vue.createVNode(datePicker_components_panel_SinglePanel["default"], panelProps.value, null);
        },
        "tagInputProps": {
          onRemove: onTagRemoveClick
        },
        "onClear": onTagClearClick,
        "prefixIcon": function prefixIcon() {
          return renderTNodeJSX("prefixIcon");
        },
        "suffixIcon": function suffixIcon() {
          return renderTNodeJSX("suffixIcon") || Vue.createVNode(CalendarIcon, null, null);
        }
      }), null)]);
    };
  }
});

exports["default"] = _DatePicker;
//# sourceMappingURL=DatePicker.js.map
