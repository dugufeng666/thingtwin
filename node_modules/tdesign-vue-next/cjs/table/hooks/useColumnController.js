/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var Vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var dialog_plugin = require('../../dialog/plugin.js');
var table_hooks_useTableHeader = require('./useTableHeader.js');
var configProvider_hooks_useConfig = require('../../config-provider/hooks/useConfig.js');
var hooks_useGlobalIcon = require('../../hooks/useGlobalIcon.js');
var hooks_useDefaultValue = require('../../hooks/useDefaultValue.js');
var table_utils = require('../utils.js');
var button_index = require('../../button/index.js');
var table_columnCheckboxGroup = require('../column-checkbox-group.js');
require('@babel/runtime/helpers/typeof');
var hooks_tnode = require('../../_chunks/dep-db9cff9c.js');
require('../../hooks/useKeepAnimation.js');
var isFunction = require('../../_chunks/dep-4bb500b8.js');
require('../../dialog/dialog.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../dialog/props.js');
require('../../hooks/useConfig.js');
require('../../_chunks/dep-ede16f7f.js');
require('../../_chunks/dep-1d38e864.js');
require('../../_chunks/dep-75a87f7c.js');
require('dayjs');
require('../../_chunks/dep-99110617.js');
require('../../_chunks/dep-5e2171e6.js');
require('../../_chunks/dep-ce3eb768.js');
require('../../_chunks/dep-4479843a.js');
require('../../_chunks/dep-fa2fda14.js');
require('../../_chunks/dep-0e58cbbd.js');
require('../../_chunks/dep-00f18931.js');
require('../../_chunks/dep-84a0e81d.js');
require('../../_chunks/dep-5247a460.js');
require('../../_chunks/dep-a76126df.js');
require('../../_chunks/dep-564b3613.js');
require('../../_chunks/dep-11fc6f95.js');
require('../../_chunks/dep-c3bc048f.js');
require('../../_chunks/dep-58abd685.js');
require('../../_chunks/dep-3a0b641f.js');
require('../../_chunks/dep-e6692a32.js');
require('../../_chunks/dep-10d5d599.js');
require('../../_chunks/dep-41ef4b47.js');
require('../../_chunks/dep-d0783150.js');
require('../../_chunks/dep-9e87e1e1.js');
require('../../_chunks/dep-fcea8340.js');
require('../../_chunks/dep-2debdee8.js');
require('../../_chunks/dep-1c142d75.js');
require('../../_chunks/dep-c1b17346.js');
require('../../_chunks/dep-94fa6b5d.js');
require('../../_chunks/dep-12a3fd02.js');
require('../../dialog/hooks/useSameTarget.js');
require('../../hooks/useDestroyOnClose.js');
require('../../_chunks/dep-209ef06c.js');
require('../../_chunks/dep-ce66c261.js');
require('../../_chunks/dep-6bdaf809.js');
require('../../_chunks/dep-19f6d038.js');
require('../../_chunks/dep-272b1445.js');
require('../../hooks/useTeleport.js');
require('../../utils/dom.js');
require('../../hooks/usePopupManager.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('../../dialog/utils/index.js');
require('../../dialog/dialog-card.js');
require('../../dialog/dialog-card-props.js');
require('../../dialog/hooks/useAction.js');
require('../../_chunks/dep-b381bc1a.js');
require('../../_chunks/dep-6441bda0.js');
require('../../_chunks/dep-54b7116c.js');
require('../../_chunks/dep-f0a744e5.js');
require('../../_chunks/dep-89cb0bb6.js');
require('../../_chunks/dep-e2633705.js');
require('../../_chunks/dep-dee45c79.js');
require('../../button/button.js');
require('../../loading/index.js');
require('../../_chunks/dep-14125703.js');
require('../../loading/plugin.js');
require('../../loading/loading.js');
require('../../loading/icon/gradient.js');
require('../../_chunks/dep-0290afd5.js');
require('../../loading/props.js');
require('../../utils/render-tnode.js');
require('../../_chunks/dep-3a1cfa95.js');
require('../../_chunks/dep-36b83f83.js');
require('../../_chunks/dep-0b6e5f33.js');
require('../../_chunks/dep-3c0d3dc9.js');
require('../../_chunks/dep-5472dcbf.js');
require('../../_chunks/dep-9ab88918.js');
require('../../_chunks/dep-425a3c77.js');
require('../../_chunks/dep-449af6ce.js');
require('../../_chunks/dep-13bdf55b.js');
require('../../_chunks/dep-c8867018.js');
require('../../_chunks/dep-350b64b1.js');
require('../../utils/withInstall.js');
require('../../button/props.js');
require('../../hooks/useRipple.js');
require('../../hooks/useDisabled.js');
require('../../_chunks/dep-1e4a8214.js');
require('./useMultiHeader.js');
require('./useClassName.js');
require('../ellipsis.js');
require('../../tooltip/index.js');
require('../../tooltip/tooltip.js');
require('../../tooltip/props.js');
require('../../popup/props.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@popperjs/core');
require('../../hooks/useVModel.js');
require('../../popup/container.js');
require('../../hooks/useResizeObserver.js');
require('../../_chunks/dep-7f787fb7.js');
require('../../_chunks/dep-b5ec465c.js');
require('../../tooltip/utils/index.js');
require('../../checkbox/index.js');
require('../../checkbox/checkbox.js');
require('../../checkbox/props.js');
require('../../checkbox/consts/index.js');
require('../../checkbox/hooks/useCheckboxLazyLoad.js');
require('../../_chunks/dep-8c390b09.js');
require('../../checkbox/hooks/useKeyboardEvent.js');
require('../../_chunks/dep-d1e9ac5b.js');
require('../../hooks/useReadonly.js');
require('../../checkbox/group.js');
require('../../checkbox/checkbox-group-props.js');
require('../../hooks/slot.js');
require('../../_chunks/dep-e2429209.js');
require('../../_chunks/dep-6d957e14.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function getColumnKeys(columns) {
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();
  for (var i = 0, len = columns.length; i < len; i++) {
    var _col$children;
    var col = columns[i];
    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      getColumnKeys(col.children, keys);
    } else {
      col.colKey && keys.add(col.colKey);
    }
  }
  return keys;
}
function useColumnController(props, context) {
  var _useConfig = configProvider_hooks_useConfig.useConfig("table", props.locale),
    classPrefix = _useConfig.classPrefix,
    globalConfig = _useConfig.globalConfig;
  var _useGlobalIcon = hooks_useGlobalIcon.useGlobalIcon({
      SettingIcon: tdesignIconsVueNext.SettingIcon
    }),
    SettingIcon = _useGlobalIcon.SettingIcon;
  var _toRefs = Vue.toRefs(props),
    columns = _toRefs.columns,
    columnController = _toRefs.columnController,
    displayColumns = _toRefs.displayColumns,
    columnControllerVisible = _toRefs.columnControllerVisible;
  var dialogInstance = Vue.ref(null);
  var renderTNodeJSX = hooks_tnode.useTNodeJSX();
  var enabledColKeys = Vue.computed(function () {
    var _columnController$val;
    var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray__default["default"](getColumnKeys(columns.value))).filter(function (v) {
      return v;
    });
    return new Set(arr);
  });
  var keys = _toConsumableArray__default["default"](getColumnKeys(columns.value));
  var _useDefaultValue = hooks_useDefaultValue["default"](displayColumns, props.defaultDisplayColumns || keys, props.onDisplayColumnsChange, "displayColumns"),
    _useDefaultValue2 = _slicedToArray__default["default"](_useDefaultValue, 2),
    tDisplayColumns = _useDefaultValue2[0],
    setTDisplayColumns = _useDefaultValue2[1];
  var columnCheckboxKeys = Vue.ref(displayColumns.value || props.defaultDisplayColumns || keys);
  var checkboxGroupList = Vue.computed(function () {
    var _columnController$val2;
    if ((_columnController$val2 = columnController.value) !== null && _columnController$val2 !== void 0 && (_columnController$val2 = _columnController$val2.groupColumns) !== null && _columnController$val2 !== void 0 && _columnController$val2.length) {
      return getCheckboxGroupOptions(columns.value);
    }
    var oneItem = {
      label: globalConfig.value.selectAllText,
      options: getCheckboxOptions(columns.value)
    };
    return [oneItem];
  });
  Vue.watch([displayColumns], function (_ref) {
    var _ref2 = _slicedToArray__default["default"](_ref, 1),
      val = _ref2[0];
    columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;
  });
  function getOneColumnItem(column, i) {
    return {
      label: function label() {
        return table_hooks_useTableHeader.renderTitle(context.slots, column, i);
      },
      value: column.colKey,
      disabled: !enabledColKeys.value.has(column.colKey)
    };
  }
  function getCheckboxGroupOptions(columns2) {
    var _columnController$val3;
    var groupColumns = (_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.groupColumns;
    if (!(groupColumns !== null && groupColumns !== void 0 && groupColumns.length)) return [];
    var groupList = [];
    var _loop = function loop(columns3) {
      for (var i = 0, len = columns3.length; i < len; i++) {
        var _column$children;
        var column = columns3[i];
        var oneItem = getOneColumnItem(column, i);
        for (var j = 0, len1 = groupColumns.length; j < len1; j++) {
          var _groupList$j;
          var groupInfo = groupColumns[j];
          if (!groupInfo.columns.includes(column.colKey)) continue;
          if ((_groupList$j = groupList[j]) !== null && _groupList$j !== void 0 && (_groupList$j = _groupList$j.options) !== null && _groupList$j !== void 0 && _groupList$j.length) {
            groupList[j].options.push(oneItem);
          } else {
            groupList[j] = _objectSpread(_objectSpread({}, groupColumns[j]), {}, {
              options: [oneItem]
            });
          }
        }
        if ((_column$children = column.children) !== null && _column$children !== void 0 && _column$children.length) {
          _loop(column.children);
        }
      }
    };
    _loop(columns2);
    return groupList;
  }
  function getCheckboxOptions(columns2) {
    var _columnController$val4;
    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    if ((_columnController$val4 = columnController.value) !== null && _columnController$val4 !== void 0 && (_columnController$val4 = _columnController$val4.groupColumns) !== null && _columnController$val4 !== void 0 && _columnController$val4.length) return [];
    for (var i = 0, len = columns2.length; i < len; i++) {
      var _item$children;
      var item = columns2[i];
      if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        getCheckboxOptions(item.children, arr);
      } else {
        if (item.colKey) {
          arr.push(getOneColumnItem(item, i));
        }
      }
    }
    return arr;
  }
  var handleCheckChange = function handleCheckChange(val, ctx) {
    var _props$onColumnChange;
    columnCheckboxKeys.value = val;
    var params = {
      columns: val,
      type: ctx.type,
      currentColumn: table_utils.getCurrentRowByKey(columns.value, String(ctx.current)),
      e: ctx.e
    };
    (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 || _props$onColumnChange.call(props, params);
  };
  var handleToggleColumnController = function handleToggleColumnController() {
    var _columnController$val8;
    if (dialogInstance.value) {
      dialogInstance.value.show();
      return;
    }
    dialogInstance.value = dialog_plugin.DialogPlugin.confirm(_objectSpread({
      header: globalConfig.value.columnConfigTitleText,
      body: function body() {
        var _columnController$val5;
        var widthMode = ((_columnController$val5 = columnController.value) === null || _columnController$val5 === void 0 ? void 0 : _columnController$val5.displayType) === "fixed-width" ? "fixed" : "auto";
        var _ref3 = columnController.value || {},
          columnControllerTopContent = _ref3.columnControllerTopContent,
          columnControllerBottomContent = _ref3.columnControllerBottomContent;
        var defaultNode = Vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-table__column-controller"), "".concat(classPrefix.value, "-table__column-controller--").concat(widthMode)]
        }, [Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-table__column-controller-body")
        }, [isFunction.isFunction(columnControllerTopContent) ? columnControllerTopContent(Vue.h) : renderTNodeJSX("columnControllerTopContent"), globalConfig.value.columnConfigDescriptionText && Vue.createVNode("p", {
          "class": "".concat(classPrefix.value, "-table__column-controller-desc")
        }, [globalConfig.value.columnConfigDescriptionText]), checkboxGroupList.value.map(function (group, index) {
          var _columnController$val6, _columnController$val7;
          var uniqueKey = (_columnController$val6 = columnController.value) !== null && _columnController$val6 !== void 0 && (_columnController$val6 = _columnController$val6.groupColumns) !== null && _columnController$val6 !== void 0 && _columnController$val6.length ? String(group.value || index) : void 0;
          return Vue.createVNode(table_columnCheckboxGroup["default"], {
            "key": group.value || index,
            "uniqueKey": uniqueKey,
            "value": columnCheckboxKeys.value,
            "label": group.label,
            "options": group.options,
            "onChange": handleCheckChange,
            "checkboxProps": (_columnController$val7 = columnController.value) === null || _columnController$val7 === void 0 ? void 0 : _columnController$val7.checkboxProps
          }, null);
        }), isFunction.isFunction(columnControllerBottomContent) ? columnControllerBottomContent(Vue.h) : renderTNodeJSX("columnControllerBottomContent")])]);
        return defaultNode;
      },
      confirmBtn: globalConfig.value.confirmText,
      cancelBtn: globalConfig.value.cancelText,
      width: 612,
      onConfirm: function onConfirm() {
        setTDisplayColumns(_toConsumableArray__default["default"](columnCheckboxKeys.value));
        if (columnControllerVisible.value === void 0) {
          dialogInstance.value.hide();
        } else {
          var _props$onColumnContro;
          (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 || _props$onColumnContro.call(props, false, {
            trigger: "confirm"
          });
          context.emit("update:columnControllerVisible", false);
        }
      },
      onClose: function onClose() {
        if (columnControllerVisible.value === void 0) {
          dialogInstance.value.hide();
        } else {
          var _props$onColumnContro2;
          (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 || _props$onColumnContro2.call(props, false, {
            trigger: "cancel"
          });
          context.emit("update:columnControllerVisible", false);
        }
      }
    }, ((_columnController$val8 = columnController.value) === null || _columnController$val8 === void 0 ? void 0 : _columnController$val8.dialogProps) || {}));
  };
  Vue.watch([columnControllerVisible], function (_ref4) {
    var _ref5 = _slicedToArray__default["default"](_ref4, 1),
      visible = _ref5[0];
    if (visible === void 0) return;
    if (dialogInstance.value) {
      visible ? dialogInstance.value.show() : dialogInstance.value.hide();
    } else {
      visible && handleToggleColumnController();
    }
  }, {
    immediate: true
  });
  var renderColumnController = function renderColumnController() {
    var _props$columnControll;
    var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
    var placement = isColumnController ? columnController.value.placement || "top-right" : "";
    if (isColumnController && columnController.value.hideTriggerButton) return null;
    var classes = ["".concat(classPrefix.value, "-table__column-controller-trigger"), _defineProperty__default["default"]({}, "".concat(classPrefix.value, "-align-").concat(placement), !!placement)];
    return Vue.createVNode("div", {
      "class": classes
    }, [Vue.createVNode(button_index.Button, Vue.mergeProps({
      "theme": "default",
      "variant": "outline",
      "onClick": handleToggleColumnController,
      "content": globalConfig.value.columnConfigButtonText
    }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps), {
      icon: function icon() {
        return Vue.createVNode(SettingIcon, null, null);
      }
    })]);
  };
  return {
    tDisplayColumns: tDisplayColumns,
    columnCheckboxKeys: columnCheckboxKeys,
    renderColumnController: renderColumnController
  };
}

exports["default"] = useColumnController;
exports.getColumnKeys = getColumnKeys;
//# sourceMappingURL=useColumnController.js.map
