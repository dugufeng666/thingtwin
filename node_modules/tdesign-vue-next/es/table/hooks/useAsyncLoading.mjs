/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-e32fd926.mjs';
import { computed, createVNode } from 'vue';
import { isString } from 'lodash-es';
import { u as useTNodeJSX } from '../../_chunks/dep-8543d432.mjs';
import { Loading } from '../../loading/index.mjs';
import useClassName from './useClassName.mjs';
import '../../hooks/useConfig.mjs';
import { useConfig } from '../../config-provider/hooks/useConfig.mjs';
import '../../_chunks/dep-488f17e4.mjs';
import '../../utils/render-tnode.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../_chunks/dep-ab7207a5.mjs';
import '../../_chunks/dep-113544a7.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_chunks/dep-62fc4108.mjs';
import '../../_chunks/dep-e3b99a8c.mjs';
import '../../_chunks/dep-2124b297.mjs';
import '../../_chunks/dep-7c806dae.mjs';
import '../../utils/dom.mjs';
import '../../_chunks/dep-39bc09f2.mjs';
import '../../hooks/useTeleport.mjs';
import '../../loading/props.mjs';
import '../../config-provider/utils/context.mjs';
import '../../_chunks/dep-039819d3.mjs';
import '../../_chunks/dep-dd3530fb.mjs';
import '../../_chunks/dep-eb5cf880.mjs';
import '../../utils/withInstall.mjs';
import './style/css.mjs';

function useAsyncLoading(props) {
  var renderTNode = useTNodeJSX();
  var _useConfig = useConfig("table", props.locale),
    globalConfig = _useConfig.globalConfig;
  var _useClassName = useClassName(),
    isLoadingClass = _useClassName.isLoadingClass,
    isLoadMoreClass = _useClassName.isLoadMoreClass,
    asyncLoadingClass = _useClassName.asyncLoadingClass;
  var classes = computed(function () {
    return [asyncLoadingClass, _defineProperty(_defineProperty({}, isLoadingClass, props.asyncLoading === "loading"), isLoadMoreClass, props.asyncLoading === "load-more")];
  });
  function onLoadClick() {
    var _props$onAsyncLoading;
    if (!isString(props.asyncLoading)) return;
    (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 || _props$onAsyncLoading.call(props, {
      status: props.asyncLoading
    });
  }
  function renderAsyncLoading() {
    var asyncLoadingNode = renderTNode("asyncLoading");
    if (isString(asyncLoadingNode)) {
      var asyncLoading = props.asyncLoading;
      var loadingText = {
        "load-more": globalConfig.value.loadingMoreText,
        loading: globalConfig.value.loadingText
      }[String(asyncLoading)];
      return createVNode("div", {
        "class": classes.value,
        "onClick": onLoadClick
      }, [createVNode(Loading, {
        "indicator": asyncLoading === "loading",
        "loading": !!asyncLoading,
        "size": "small",
        "text": loadingText
      }, null)]);
    }
    if (![null, false, void 0].includes(asyncLoadingNode)) {
      return createVNode("div", {
        "class": classes.value,
        "onClick": onLoadClick
      }, [asyncLoadingNode]);
    }
    return null;
  }
  return {
    renderAsyncLoading: renderAsyncLoading
  };
}

export { useAsyncLoading as default };
//# sourceMappingURL=useAsyncLoading.mjs.map
