/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, createVNode } from 'vue';
import { usePrefixClass } from '../hooks/useConfig.js';
import props from './chat-action-props.js';
import { Button } from '../button/index.js';
import { Space } from '../space/index.js';
import { Tooltip } from '../tooltip/index.js';
import { RefreshIcon, CopyIcon, ThumbUpFilledIcon, ThumbUpIcon, ThumbDownFilledIcon, ThumbDownIcon } from 'tdesign-icons-vue-next';
import { u as useTNodeJSX } from '../_chunks/dep-aa6caf72.js';
import { C as Clipboard } from '../_chunks/dep-d0b69a07.js';
import { MessagePluginSingleton } from './utils/index.js';
import { useConfig } from '../config-provider/hooks/useConfig.js';
import 'lodash-es';
import '../config-provider/utils/context.js';
import '../_chunks/dep-b3d947fc.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-d1906e4e.js';
import 'dayjs';
import '../button/button.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/defineProperty';
import '../loading/index.js';
import '../loading/directive.js';
import '../loading/plugin.js';
import '../loading/loading.js';
import '@babel/runtime/helpers/slicedToArray';
import '../loading/icon/gradient.js';
import '../_chunks/dep-c7856a9b.js';
import '../_chunks/dep-6e93485b.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../utils/dom.js';
import '../hooks/useTeleport.js';
import '../loading/props.js';
import '../utils/render-tnode.js';
import '../utils/withInstall.js';
import '../button/props.js';
import '../hooks/useRipple.js';
import '../hooks/useKeepAnimation.js';
import '../hooks/useDisabled.js';
import '../space/space.js';
import '../space/props.js';
import '../hooks/slot.js';
import '../tooltip/tooltip.js';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/index.js';
import '../popup/popup.js';
import '@popperjs/core';
import '../hooks/useVModel.js';
import '../popup/container.js';
import '../hooks/useResizeObserver.js';
import '../tooltip/utils/index.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '../message/index.js';
import '../message/message.js';
import '../message/consts/index.js';
import '../message/props.js';
import '../hooks/useGlobalIcon.js';
import '../message/utils/animation.js';
import '../message/plugin.js';
import '../message/message-list.js';
import '../notification/index.js';
import '../notification/notification.js';
import '../notification/props.js';
import '../notification/utils/animate.js';
import '../notification/consts/index.js';
import '../notification/plugin.js';
import '../notification/notification-list.js';
import '../dialog/index.js';
import '../dialog/dialog.js';
import '../dialog/props.js';
import '../dialog/hooks/useSameTarget.js';
import '../hooks/useDestroyOnClose.js';
import '../_chunks/dep-cd86296f.js';
import '../hooks/usePopupManager.js';
import '../dialog/utils/index.js';
import '../dialog/dialog-card.js';
import '../dialog/dialog-card-props.js';
import '../dialog/hooks/useAction.js';
import '../dialog/plugin.js';
import '../drawer/index.js';
import '../drawer/drawer.js';
import '../drawer/props.js';
import '../drawer/hooks/index.js';
import '../drawer/plugin.js';

var _ChatAction = defineComponent({
  name: "TChatAction",
  props: props,
  emits: ["operation"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var COMPONENT_NAME = usePrefixClass("chat");
    var renderTNodeJSX = useTNodeJSX();
    var messagePluginInstance = MessagePluginSingleton.getInstance();
    var _useConfig = useConfig("chat"),
      globalConfig = _useConfig.globalConfig;
    var _globalConfig$value = globalConfig.value,
      copyTipText = _globalConfig$value.copyTipText,
      likeTipText = _globalConfig$value.likeTipText,
      dislikeTipText = _globalConfig$value.dislikeTipText,
      refreshTipText = _globalConfig$value.refreshTipText,
      copyTextSuccess = _globalConfig$value.copyTextSuccess,
      copyTextFail = _globalConfig$value.copyTextFail;
    return function () {
      var content = renderTNodeJSX("content");
      var disabled = props2.disabled;
      var copyAnswer = function copyAnswer() {
        var copyBtn = new Clipboard(".copy-btn");
        copyBtn.on("success", function () {
          messagePluginInstance.showSuccess(copyTextSuccess);
        });
        copyBtn.on("error", function () {
          messagePluginInstance.showError(copyTextFail);
        });
      };
      var handleClick = function handleClick(e, type) {
        if (type === "copy") {
          copyAnswer();
        }
        emit("operation", type, {
          e: e
        });
      };
      var replayButton = props2.operationBtn.includes("replay") ? createVNode(Space, null, {
        "default": function _default() {
          return [createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh")
          }, [createVNode(Tooltip, {
            "content": refreshTipText
          }, {
            "default": function _default() {
              return [createVNode(Button, {
                "theme": "default",
                "size": "small",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "replay");
                }
              }, {
                "default": function _default() {
                  return [createVNode(RefreshIcon, null, null)];
                }
              })];
            }
          }), createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__refresh-line")
          }, null)])];
        }
      }) : null;
      var copyButton = props2.operationBtn.includes("copy") ? createVNode(Space, null, {
        "default": function _default() {
          return [createVNode(Tooltip, {
            "content": copyTipText
          }, {
            "default": function _default() {
              return [createVNode(Button, {
                "theme": "default",
                "size": "small",
                "class": "copy-btn",
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "copy");
                },
                "data-clipboard-text": content
              }, {
                "default": function _default() {
                  return [createVNode(CopyIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var goodButton = props2.operationBtn.includes("good") ? createVNode(Space, null, {
        "default": function _default() {
          return [createVNode(Tooltip, {
            "content": likeTipText
          }, {
            "default": function _default() {
              return [createVNode(Button, {
                "theme": "default",
                "size": "small",
                "class": props2.isGood && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "good");
                }
              }, {
                "default": function _default() {
                  return [props2.isGood ? createVNode(ThumbUpFilledIcon, null, null) : createVNode(ThumbUpIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var badButton = props2.operationBtn.includes("bad") ? createVNode(Space, null, {
        "default": function _default() {
          return [createVNode(Tooltip, {
            "content": dislikeTipText
          }, {
            "default": function _default() {
              return [createVNode(Button, {
                "theme": "default",
                "size": "small",
                "class": props2.isBad && "".concat(COMPONENT_NAME.value, "-button--active"),
                "disabled": disabled,
                "onClick": function onClick(e) {
                  return handleClick(e, "bad");
                }
              }, {
                "default": function _default() {
                  return [props2.isBad ? createVNode(ThumbDownFilledIcon, null, null) : createVNode(ThumbDownIcon, null, null)];
                }
              })];
            }
          })];
        }
      }) : null;
      var buttonComponents = {
        replay: replayButton,
        copy: copyButton,
        good: goodButton,
        bad: badButton
      };
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__actions")
      }, [props2.operationBtn.map(function (btnKey) {
        return buttonComponents[btnKey];
      })]);
    };
  }
});

export { _ChatAction as default };
//# sourceMappingURL=chat-action.js.map
