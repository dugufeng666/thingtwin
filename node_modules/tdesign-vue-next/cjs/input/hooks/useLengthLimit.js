/**
 * tdesign v1.13.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var Vue = require('vue');
var log = require('../../_chunks/dep-94e74ea7.js');
var helper = require('../../_chunks/dep-ec4a2dad.js');
var isNumber = require('../../_chunks/dep-ec389751.js');
var isObject = require('../../_chunks/dep-f022423f.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/defineProperty');
require('../../_chunks/dep-ceab8f85.js');
require('../../_chunks/dep-a8fcbdcc.js');
require('../../_chunks/dep-96341f20.js');
require('../../_chunks/dep-39c9581c.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-d7a38fb3.js');
require('../../_chunks/dep-3b62827f.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function useLengthLimit(params) {
  var getValueByLimitNumber = function getValueByLimitNumber(inputValue) {
    var _params$value = params.value,
      allowInputOverMax = _params$value.allowInputOverMax,
      maxlength = _params$value.maxlength,
      maxcharacter = _params$value.maxcharacter;
    if (!(maxlength || maxcharacter) || allowInputOverMax || !inputValue) return inputValue;
    if (maxlength) {
      return helper.limitUnicodeMaxLength(inputValue, maxlength);
    }
    if (maxcharacter) {
      var r = helper.getCharacterLength(inputValue, maxcharacter);
      if (isObject.isObject(r)) {
        return r.characters;
      }
    }
  };
  var limitNumber = Vue.computed(function () {
    var _params$value2 = params.value,
      maxlength = _params$value2.maxlength,
      maxcharacter = _params$value2.maxcharacter,
      value = _params$value2.value;
    if (isNumber.isNumber(value)) return String(value);
    if (maxlength && maxcharacter) {
      log.log.warn("Input", "Pick one of maxlength and maxcharacter please.");
    }
    if (maxlength) {
      var length = value !== null && value !== void 0 && value.length ? helper.getUnicodeLength(value) : 0;
      return "".concat(length, "/").concat(maxlength);
    }
    if (maxcharacter) {
      return "".concat(helper.getCharacterLength(value || ""), "/").concat(maxcharacter);
    }
    return "";
  });
  var innerStatus = Vue.computed(function () {
    if (limitNumber.value) {
      var _limitNumber$value$sp = limitNumber.value.split("/"),
        _limitNumber$value$sp2 = _slicedToArray__default["default"](_limitNumber$value$sp, 2),
        current = _limitNumber$value$sp2[0],
        total = _limitNumber$value$sp2[1];
      return Number(current) > Number(total) ? "error" : "";
    }
    return "";
  });
  var tStatus = Vue.computed(function () {
    var status = params.value.status;
    return status || innerStatus.value;
  });
  var onValidateChange = function onValidateChange() {
    var _params$value$onValid, _params$value3;
    (_params$value$onValid = (_params$value3 = params.value).onValidate) === null || _params$value$onValid === void 0 || _params$value$onValid.call(_params$value3, {
      error: innerStatus.value ? "exceed-maximum" : void 0
    });
  };
  Vue.watch(innerStatus, onValidateChange);
  Vue.onMounted(function () {
    innerStatus.value && onValidateChange();
  });
  return {
    tStatus: tStatus,
    limitNumber: limitNumber,
    getValueByLimitNumber: getValueByLimitNumber
  };
}

exports.useLengthLimit = useLengthLimit;
//# sourceMappingURL=useLengthLimit.js.map
