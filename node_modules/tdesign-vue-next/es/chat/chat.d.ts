declare const _default: import("vue").DefineComponent<{
    actions: {
        type: import("vue").PropType<import("./type").TdChatProps["actions"]>;
    };
    animation: {
        type: import("vue").PropType<import("./type").TdChatProps["animation"]>;
        default: import("./type").TdChatProps["animation"];
        validator(val: import("./type").TdChatProps["animation"]): boolean;
    };
    avatar: {
        type: import("vue").PropType<import("./type").TdChatProps["avatar"]>;
    };
    clearHistory: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<import("./type").TdChatProps["content"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdChatProps["data"]>;
    };
    datetime: {
        type: import("vue").PropType<import("./type").TdChatProps["datetime"]>;
    };
    isStreamLoad: BooleanConstructor;
    layout: {
        type: import("vue").PropType<import("./type").TdChatProps["layout"]>;
        default: import("./type").TdChatProps["layout"];
        validator(val: import("./type").TdChatProps["layout"]): boolean;
    };
    name: {
        type: import("vue").PropType<import("./type").TdChatProps["name"]>;
    };
    reasoning: {
        type: import("vue").PropType<import("./type").TdChatProps["reasoning"]>;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    textLoading: BooleanConstructor;
    onClear: import("vue").PropType<import("./type").TdChatProps["onClear"]>;
    onScroll: import("vue").PropType<import("./type").TdChatProps["onScroll"]>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "clear")[], "scroll" | "clear", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    actions: {
        type: import("vue").PropType<import("./type").TdChatProps["actions"]>;
    };
    animation: {
        type: import("vue").PropType<import("./type").TdChatProps["animation"]>;
        default: import("./type").TdChatProps["animation"];
        validator(val: import("./type").TdChatProps["animation"]): boolean;
    };
    avatar: {
        type: import("vue").PropType<import("./type").TdChatProps["avatar"]>;
    };
    clearHistory: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<import("./type").TdChatProps["content"]>;
    };
    data: {
        type: import("vue").PropType<import("./type").TdChatProps["data"]>;
    };
    datetime: {
        type: import("vue").PropType<import("./type").TdChatProps["datetime"]>;
    };
    isStreamLoad: BooleanConstructor;
    layout: {
        type: import("vue").PropType<import("./type").TdChatProps["layout"]>;
        default: import("./type").TdChatProps["layout"];
        validator(val: import("./type").TdChatProps["layout"]): boolean;
    };
    name: {
        type: import("vue").PropType<import("./type").TdChatProps["name"]>;
    };
    reasoning: {
        type: import("vue").PropType<import("./type").TdChatProps["reasoning"]>;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    textLoading: BooleanConstructor;
    onClear: import("vue").PropType<import("./type").TdChatProps["onClear"]>;
    onScroll: import("vue").PropType<import("./type").TdChatProps["onScroll"]>;
}>> & {
    onScroll?: (...args: any[]) => any;
    onClear?: (...args: any[]) => any;
}, {
    reverse: boolean;
    animation: "gradient" | "skeleton" | "moving";
    layout: "single" | "both";
    textLoading: boolean;
    clearHistory: boolean;
    isStreamLoad: boolean;
}, {}>;
export default _default;
