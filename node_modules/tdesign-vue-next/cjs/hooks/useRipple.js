/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var hooks_useKeepAnimation = require('./useKeepAnimation.js');
var hooks_useConfig = require('./useConfig.js');
var setStyle = require('../_chunks/dep-0290afd5.js');
require('../config-provider/hooks/useConfig.js');
require('../_chunks/dep-ede16f7f.js');
require('../_chunks/dep-1d38e864.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-75a87f7c.js');
require('dayjs');
require('../_chunks/dep-99110617.js');
require('../_chunks/dep-5e2171e6.js');
require('../_chunks/dep-ce3eb768.js');
require('../_chunks/dep-4479843a.js');
require('../_chunks/dep-4bb500b8.js');
require('../_chunks/dep-fa2fda14.js');
require('../_chunks/dep-0e58cbbd.js');
require('../_chunks/dep-00f18931.js');
require('../_chunks/dep-84a0e81d.js');
require('../_chunks/dep-5247a460.js');
require('../_chunks/dep-a76126df.js');
require('../_chunks/dep-564b3613.js');
require('../_chunks/dep-11fc6f95.js');
require('../_chunks/dep-c3bc048f.js');
require('../_chunks/dep-58abd685.js');
require('../_chunks/dep-3a0b641f.js');
require('../_chunks/dep-e6692a32.js');
require('../_chunks/dep-10d5d599.js');
require('../_chunks/dep-41ef4b47.js');
require('../_chunks/dep-d0783150.js');
require('../_chunks/dep-9e87e1e1.js');
require('../_chunks/dep-fcea8340.js');
require('../_chunks/dep-2debdee8.js');
require('../_chunks/dep-1c142d75.js');
require('../_chunks/dep-c1b17346.js');
require('../_chunks/dep-94fa6b5d.js');
require('../_chunks/dep-12a3fd02.js');

var period = 200;
var noneRippleBg = "rgba(0, 0, 0, 0)";
var defaultRippleColor = "rgba(0, 0, 0, 0.35)";
var getRippleColor = function getRippleColor(el, fixedRippleColor) {
  var _el$dataset;
  if (fixedRippleColor) {
    return fixedRippleColor;
  }
  if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
    var rippleColor = el.dataset.ripple;
    return rippleColor;
  }
  var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");
  if (cssVariable) {
    return cssVariable;
  }
  return defaultRippleColor;
};
function useRipple(el, fixedRippleColor) {
  var rippleContainer = Vue.ref(null);
  var classPrefix = hooks_useConfig.usePrefixClass();
  var _useKeepAnimation = hooks_useKeepAnimation["default"](),
    keepRipple = _useKeepAnimation.keepRipple;
  var handleAddRipple = function handleAddRipple(e) {
    var dom = el.value;
    var rippleColor = getRippleColor(dom, fixedRippleColor === null || fixedRippleColor === void 0 ? void 0 : fixedRippleColor.value);
    if (e.button !== 0 || !el || !keepRipple) return;
    if (dom.classList.contains("".concat(classPrefix.value, "-is-active")) || dom.classList.contains("".concat(classPrefix.value, "-is-disabled")) || dom.classList.contains("".concat(classPrefix.value, "-is-checked")) || dom.classList.contains("".concat(classPrefix.value, "-is-loading"))) return;
    var elStyle = getComputedStyle(dom);
    var elBorder = parseInt(elStyle.borderWidth, 10);
    var border = elBorder > 0 ? elBorder : 0;
    var width = dom.offsetWidth;
    var height = dom.offsetHeight;
    if (rippleContainer.value.parentNode === null) {
      setStyle.setStyle(rippleContainer.value, {
        position: "absolute",
        left: "".concat(0 - border, "px"),
        top: "".concat(0 - border, "px"),
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        borderRadius: elStyle.borderRadius,
        pointerEvents: "none",
        overflow: "hidden"
      });
      dom.appendChild(rippleContainer.value);
    }
    var ripple = document.createElement("div");
    setStyle.setStyle(ripple, {
      marginTop: "0",
      marginLeft: "0",
      right: "".concat(width, "px"),
      width: "".concat(width + 20, "px"),
      height: "100%",
      transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
      transform: "skewX(-8deg)",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      backgroundColor: rippleColor,
      opacity: "0.9"
    });
    var elMap = /* @__PURE__ */new WeakMap();
    for (var n = dom.children.length, i = 0; i < n; ++i) {
      var child = dom.children[i];
      if (child.style.zIndex === "" && child !== rippleContainer.value) {
        child.style.zIndex = "1";
        elMap.set(child, true);
      }
    }
    var initPosition = dom.style.position ? dom.style.position : getComputedStyle(dom).position;
    if (initPosition === "" || initPosition === "static") {
      dom.style.position = "relative";
    }
    rippleContainer.value.insertBefore(ripple, rippleContainer.value.firstChild);
    setTimeout(function () {
      ripple.style.transform = "translateX(".concat(width, "px)");
    }, 0);
    var _handleClearRipple = function handleClearRipple() {
      ripple.style.backgroundColor = noneRippleBg;
      if (!el.value) return;
      el.value.removeEventListener("pointerup", _handleClearRipple, false);
      el.value.removeEventListener("pointerleave", _handleClearRipple, false);
      setTimeout(function () {
        ripple.remove();
        if (rippleContainer.value.children.length === 0) rippleContainer.value.remove();
      }, period * 2 + 100);
    };
    el.value.addEventListener("pointerup", _handleClearRipple, false);
    el.value.addEventListener("pointerleave", _handleClearRipple, false);
  };
  Vue.onMounted(function () {
    var dom = el === null || el === void 0 ? void 0 : el.value;
    if (!dom) return;
    rippleContainer.value = document.createElement("div");
    dom.addEventListener("pointerdown", handleAddRipple, false);
  });
  Vue.onUnmounted(function () {
    var _el$value;
    el === null || el === void 0 || (_el$value = el.value) === null || _el$value === void 0 || _el$value.removeEventListener("pointerdown", handleAddRipple, false);
  });
}

exports["default"] = useRipple;
//# sourceMappingURL=useRipple.js.map
