/**
 * tdesign v1.13.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-c7a7c399.mjs';
import { isVNode, defineComponent, createVNode, mergeProps, h, Fragment } from 'vue';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import props from './title-props.mjs';
import Ellipsis from './ellipsis.mjs';
import { a as useContent } from '../_chunks/dep-8664c288.mjs';
import '../_chunks/dep-52e265eb.mjs';
import '../config-provider/hooks/useConfig.mjs';
import 'lodash-es';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-960f05e3.mjs';
import '../_chunks/dep-3a46b404.mjs';
import '../_chunks/dep-608ebfe7.mjs';
import '../_chunks/dep-0f539ccd.mjs';
import '../_chunks/dep-3873beae.mjs';
import '../_chunks/dep-4c19ba66.mjs';
import './paragraph-props.mjs';
import '../tooltip/index.mjs';
import '../tooltip/tooltip.mjs';
import '../_chunks/dep-c9dbce85.mjs';
import '../tooltip/props.mjs';
import '../popup/props.mjs';
import '../popup/index.mjs';
import '../popup/popup.mjs';
import '@popperjs/core';
import '../hooks/index.mjs';
import '../hooks/icon.mjs';
import '../hooks/slot.mjs';
import '../utils/render-tnode.mjs';
import '../hooks/useCommonClassName.mjs';
import '../hooks/useDefaultValue.mjs';
import '../hooks/useDestroyOnClose.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../hooks/useRipple.mjs';
import '../_chunks/dep-487987c7.mjs';
import '../hooks/useVirtualScroll.mjs';
import '../hooks/useVModel.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_chunks/dep-9f0c196e.mjs';
import '../_chunks/dep-2f8437f0.mjs';
import '../utils/dom.mjs';
import '../popup/container.mjs';
import '../hooks/useResizeObserver.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../tooltip/utils/index.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _Title = defineComponent({
  name: "TTypographyTitle",
  props: props,
  setup: function setup(props2) {
    var COMPONENT_NAME = usePrefixClass("typography");
    var renderContent = useContent();
    return function () {
      var _slot;
      var Tag = props2.level;
      var content = renderContent("default", "content");
      return props2.ellipsis ? createVNode(Ellipsis, mergeProps(props2, {
        "class": COMPONENT_NAME.value
      }), _isSlot(_slot = h.apply(void 0, [Tag].concat(_toConsumableArray(content)))) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }) : createVNode(Fragment, null, [h.apply(void 0, [Tag, {
        "class": COMPONENT_NAME.value
      }].concat(_toConsumableArray(content)))]);
    };
  }
});

export { _Title as default };
//# sourceMappingURL=title.mjs.map
