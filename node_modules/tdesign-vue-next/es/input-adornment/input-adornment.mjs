/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-e32fd926.mjs';
import { defineComponent, createVNode, h } from 'vue';
import { isString, isNumber, isFunction } from 'lodash-es';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { u as useTNodeJSX } from '../_chunks/dep-8543d432.mjs';
import props from './props.mjs';
import '../_chunks/dep-488f17e4.mjs';
import '../config-provider/hooks/useConfig.mjs';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-039819d3.mjs';
import '../_chunks/dep-39bc09f2.mjs';
import '../_chunks/dep-dd3530fb.mjs';
import '../_chunks/dep-eb5cf880.mjs';
import '../utils/render-tnode.mjs';

var _InputAdornment = defineComponent({
  name: "TInputAdornment",
  inheritAttrs: false,
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var COMPONENT_NAME = usePrefixClass("input-adornment");
    var renderTNodeJSX = useTNodeJSX();
    var renderAddon = function renderAddon(h2, type, addon) {
      var addonNode;
      var isContentNode = isString(addon) || isNumber(addon);
      if (!slots[type] && isString(addon) && !addon) return null;
      if (slots[type]) {
        if (slots[type](null).length === 1 && typeof slots[type](null)[0].children === "string") {
          addonNode = createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__text")
          }, [slots[type](null)]);
        } else {
          addonNode = slots[type](null);
        }
      } else if (isFunction(addon)) {
        addonNode = addon(h2);
      } else {
        addonNode = isContentNode ? createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__text")
        }, [addon]) : addon;
      }
      return addonNode ? createVNode("span", {
        "class": "".concat(COMPONENT_NAME.value, "__").concat(type)
      }, [addonNode]) : addonNode;
    };
    return function () {
      var prepend = renderAddon(h, "prepend", props2.prepend);
      var append = renderAddon(h, "append", props2.append);
      var defaultSlot = renderTNodeJSX("default") || [null];
      var className = [COMPONENT_NAME.value, _defineProperty(_defineProperty({}, "".concat(COMPONENT_NAME.value, "--prepend"), prepend), "".concat(COMPONENT_NAME.value, "--append"), append)];
      if (!prepend && !append) {
        return defaultSlot[0];
      }
      return createVNode("div", {
        "class": className
      }, [prepend, defaultSlot[0], append]);
    };
  }
});

export { _InputAdornment as default };
//# sourceMappingURL=input-adornment.mjs.map
