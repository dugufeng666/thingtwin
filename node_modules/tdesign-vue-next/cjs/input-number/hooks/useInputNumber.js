/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var Vue = require('vue');
var hooks_useCommonClassName = require('../../hooks/useCommonClassName.js');
var hooks_useVModel = require('../../hooks/useVModel.js');
var hooks_useReadonly = require('../../hooks/useReadonly.js');
var number = require('../../_chunks/dep-279ff7b9.js');
var hooks_useDisabled = require('../../hooks/useDisabled.js');
var largeNumber = require('../../_chunks/dep-2b0b7f56.js');
require('../../config-provider/hooks/useConfig.js');
require('../../_chunks/dep-ede16f7f.js');
require('../../_chunks/dep-1d38e864.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-75a87f7c.js');
require('dayjs');
require('../../_chunks/dep-99110617.js');
require('../../_chunks/dep-5e2171e6.js');
require('../../_chunks/dep-ce3eb768.js');
require('../../_chunks/dep-4479843a.js');
require('../../_chunks/dep-4bb500b8.js');
require('../../_chunks/dep-fa2fda14.js');
require('../../_chunks/dep-0e58cbbd.js');
require('../../_chunks/dep-00f18931.js');
require('../../_chunks/dep-84a0e81d.js');
require('../../_chunks/dep-5247a460.js');
require('../../_chunks/dep-a76126df.js');
require('../../_chunks/dep-564b3613.js');
require('../../_chunks/dep-11fc6f95.js');
require('../../_chunks/dep-c3bc048f.js');
require('../../_chunks/dep-58abd685.js');
require('../../_chunks/dep-3a0b641f.js');
require('../../_chunks/dep-e6692a32.js');
require('../../_chunks/dep-10d5d599.js');
require('../../_chunks/dep-41ef4b47.js');
require('../../_chunks/dep-d0783150.js');
require('../../_chunks/dep-9e87e1e1.js');
require('../../_chunks/dep-fcea8340.js');
require('../../_chunks/dep-2debdee8.js');
require('../../_chunks/dep-1c142d75.js');
require('../../_chunks/dep-c1b17346.js');
require('../../_chunks/dep-94fa6b5d.js');
require('../../_chunks/dep-12a3fd02.js');
require('../../_chunks/dep-3c0d3dc9.js');
require('../../_chunks/dep-0b6e5f33.js');
require('../../_chunks/dep-6441bda0.js');
require('../../_chunks/dep-54b7116c.js');
require('../../_chunks/dep-1e4a8214.js');
require('../../_chunks/dep-7bb1a236.js');
require('../../_chunks/dep-6bdaf809.js');
require('../../_chunks/dep-272b1445.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function useInputNumber(props) {
  var _useCommonClassName = hooks_useCommonClassName["default"](),
    classPrefix = _useCommonClassName.classPrefix,
    sizeClassNames = _useCommonClassName.sizeClassNames,
    statusClassNames = _useCommonClassName.statusClassNames;
  var _toRefs = Vue.toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue,
    max = _toRefs.max,
    min = _toRefs.min;
  var _useVModel = hooks_useVModel["default"](value, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
    tValue = _useVModel2[0],
    setTValue = _useVModel2[1];
  var inputRef = Vue.ref();
  var userInput = Vue.ref("");
  var tDisabled = hooks_useDisabled.useDisabled();
  var isReadonly = hooks_useReadonly.useReadonly();
  var isError = Vue.ref();
  var disabledReduce = Vue.computed(function () {
    return tDisabled.value || !number.canReduceNumber(tValue.value, props.min, props.largeNumber);
  });
  var disabledAdd = Vue.computed(function () {
    return tDisabled.value || !number.canAddNumber(tValue.value, props.max, props.largeNumber);
  });
  var wrapClasses = Vue.computed(function () {
    return ["".concat(classPrefix.value, "-input-number"), sizeClassNames[props.size], _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, statusClassNames.disabled, tDisabled.value), "".concat(classPrefix.value, "-is-controls-right"), props.theme === "column"), "".concat(classPrefix.value, "-input-number--").concat(props.theme), props.theme), "".concat(classPrefix.value, "-input-number--auto-width"), props.autoWidth)];
  });
  var reduceClasses = Vue.computed(function () {
    return ["".concat(classPrefix.value, "-input-number__decrease"), _defineProperty__default["default"]({}, statusClassNames.disabled, disabledReduce.value)];
  });
  var addClasses = Vue.computed(function () {
    return ["".concat(classPrefix.value, "-input-number__increase"), _defineProperty__default["default"]({}, statusClassNames.disabled, disabledAdd.value)];
  });
  var getUserInput = function getUserInput(value2) {
    var _inputRef$value;
    if (!value2 && value2 !== 0) return "";
    var inputStr = value2 || value2 === 0 ? String(value2) : "";
    if (!((_inputRef$value = inputRef.value) !== null && _inputRef$value !== void 0 && (_inputRef$value = _inputRef$value.inputRef) !== null && _inputRef$value !== void 0 && _inputRef$value.contains(document.activeElement))) {
      var num = number.formatUnCompleteNumber(inputStr, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber,
        isToFixed: true
      });
      inputStr = num || num === 0 ? String(num) : "";
      if (props.format) {
        inputStr = String(props.format(value2, {
          fixedNumber: inputStr
        }));
      }
    }
    return inputStr;
  };
  Vue.watch(tValue, function (val) {
    var largeNumber$1 = props.largeNumber,
      decimalPlaces = props.decimalPlaces;
    var inputValue = [void 0, null].includes(val) ? "" : String(val);
    if (!largeNumber$1 && !Number.isNaN(userInput.value)) {
      if (parseFloat(userInput.value) !== val) {
        userInput.value = getUserInput(inputValue);
      }
      var fixedNumber = Number(largeNumber.largeNumberToFixed(inputValue, decimalPlaces, largeNumber$1));
      if (decimalPlaces !== void 0 && ![void 0, null].includes(val) && Number(fixedNumber) !== Number(tValue.value)) {
        setTValue(fixedNumber, {
          type: "props",
          e: void 0
        });
      }
    }
    if (largeNumber$1) {
      userInput.value = getUserInput(inputValue);
      if (decimalPlaces !== void 0 && largeNumber.largeNumberToFixed(inputValue, decimalPlaces, largeNumber$1) !== val) {
        var _inputRef$value2;
        var completeValue = inputValue;
        if (!((_inputRef$value2 = inputRef.value) !== null && _inputRef$value2 !== void 0 && (_inputRef$value2 = _inputRef$value2.inputRef) !== null && _inputRef$value2 !== void 0 && _inputRef$value2.contains(document.activeElement))) {
          completeValue = number.formatUnCompleteNumber(completeValue, {
            decimalPlaces: props.decimalPlaces,
            largeNumber: props.largeNumber,
            isToFixed: true
          });
        }
        setTValue(completeValue, {
          type: "props",
          e: void 0
        });
      }
    }
  }, {
    immediate: true
  });
  Vue.watch([tValue, max, min], function () {
    var _props$onValidate;
    if ([void 0, "", null].includes(tValue.value)) return;
    var max2 = props.max,
      min2 = props.min,
      largeNumber = props.largeNumber;
    var error = number.getMaxOrMinValidateResult({
      value: tValue.value,
      largeNumber: largeNumber,
      max: max2,
      min: min2
    });
    isError.value = error;
    (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 || _props$onValidate.call(props, {
      error: error
    });
  }, {
    immediate: true
  });
  var handleStepValue = function handleStepValue(op) {
    var newValue = number.getStepValue({
      op: op,
      step: props.step,
      max: props.max,
      min: props.min,
      lastValue: tValue.value,
      largeNumber: props.largeNumber
    });
    var largeNumber = props.largeNumber,
      max2 = props.max,
      min2 = props.min;
    var overLimit = number.getMaxOrMinValidateResult({
      value: newValue,
      largeNumber: largeNumber,
      max: max2,
      min: min2
    });
    return {
      overLimit: overLimit,
      newValue: newValue
    };
  };
  var handleReduce = function handleReduce(e) {
    if (disabledReduce.value || isReadonly.value) return;
    var r = handleStepValue("reduce");
    if (r.overLimit && !props.allowInputOverLimit) return;
    setTValue(r.newValue, {
      type: "reduce",
      e: e
    });
  };
  var handleAdd = function handleAdd(e) {
    if (disabledAdd.value || isReadonly.value) return;
    var r = handleStepValue("add");
    if (r.overLimit && !props.allowInputOverLimit) return;
    setTValue(r.newValue, {
      type: "add",
      e: e
    });
  };
  var onInnerInputChange = function onInnerInputChange(inputValue, _ref4) {
    var e = _ref4.e;
    var val = number.formatThousandths(inputValue);
    if (!number.canInputNumber(val, props.largeNumber)) return;
    userInput.value = val;
    if (props.largeNumber) {
      setTValue(val, {
        type: "input",
        e: e
      });
      return;
    }
    if (number.canSetValue(String(val), Number(tValue.value))) {
      var newVal = val === "" ? void 0 : Number(val);
      setTValue(newVal, {
        type: "input",
        e: e
      });
    }
  };
  var handleBlur = function handleBlur(value2, ctx) {
    var _props$onBlur3;
    var largeNumber = props.largeNumber,
      max2 = props.max,
      min2 = props.min,
      decimalPlaces = props.decimalPlaces;
    if (!props.allowInputOverLimit && tValue.value !== void 0) {
      var r = number.getMaxOrMinValidateResult({
        value: tValue.value,
        largeNumber: largeNumber,
        max: max2,
        min: min2
      });
      if (r === "below-minimum") {
        var _props$onBlur;
        setTValue(min2, {
          type: "blur",
          e: ctx.e
        });
        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, min2, ctx);
        return;
      }
      if (r === "exceed-maximum") {
        var _props$onBlur2;
        setTValue(max2, {
          type: "blur",
          e: ctx.e
        });
        (_props$onBlur2 = props.onBlur) === null || _props$onBlur2 === void 0 || _props$onBlur2.call(props, max2, ctx);
        return;
      }
    }
    var newValue = number.formatUnCompleteNumber(value2, {
      decimalPlaces: decimalPlaces,
      largeNumber: largeNumber
    });
    userInput.value = getUserInput(newValue);
    if (newValue !== tValue.value) {
      setTValue(newValue, {
        type: "blur",
        e: ctx.e
      });
    }
    (_props$onBlur3 = props.onBlur) === null || _props$onBlur3 === void 0 || _props$onBlur3.call(props, newValue, ctx);
  };
  var handleFocus = function handleFocus(value2, ctx) {
    var _props$onFocus;
    userInput.value = tValue.value || tValue.value === 0 ? String(tValue.value) : "";
    (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, value2, ctx);
  };
  var handleKeydown = function handleKeydown(value2, ctx) {
    var _props$onKeydown;
    if (tDisabled.value) return;
    var e = ctx.e;
    var keyEvent = {
      ArrowUp: handleAdd,
      ArrowDown: handleReduce
    };
    var code = e.code || e.key;
    if (keyEvent[code] !== void 0) {
      keyEvent[code](e);
    }
    (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 || _props$onKeydown.call(props, value2, ctx);
  };
  var handleKeyup = function handleKeyup(value2, ctx) {
    var _props$onKeyup;
    (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 || _props$onKeyup.call(props, value2, ctx);
  };
  var handleKeypress = function handleKeypress(value2, ctx) {
    var _props$onKeypress;
    (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 || _props$onKeypress.call(props, value2, ctx);
  };
  var handleEnter = function handleEnter(value2, ctx) {
    var _props$onEnter;
    userInput.value = getUserInput(value2);
    var newValue = number.formatUnCompleteNumber(value2, {
      decimalPlaces: props.decimalPlaces,
      largeNumber: props.largeNumber
    });
    if (newValue !== value2 && String(newValue) !== value2) {
      setTValue(newValue, {
        type: "enter",
        e: ctx.e
      });
    }
    (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, newValue, ctx);
  };
  var focus = function focus() {
    if (tDisabled.value || isReadonly.value) return;
    inputRef.value.focus();
  };
  var blur = function blur() {
    inputRef.value.blur();
  };
  var listeners = {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onKeydown: handleKeydown,
    onKeyup: handleKeyup,
    onKeypress: handleKeypress,
    onEnter: handleEnter,
    onClick: focus
  };
  return {
    classPrefix: classPrefix,
    wrapClasses: wrapClasses,
    reduceClasses: reduceClasses,
    addClasses: addClasses,
    tDisabled: tDisabled,
    isError: isError,
    listeners: listeners,
    userInput: userInput,
    tValue: tValue,
    inputRef: inputRef,
    focus: focus,
    blur: blur,
    handleReduce: handleReduce,
    handleAdd: handleAdd,
    onInnerInputChange: onInnerInputChange,
    isReadonly: isReadonly
  };
}

exports["default"] = useInputNumber;
//# sourceMappingURL=useInputNumber.js.map
