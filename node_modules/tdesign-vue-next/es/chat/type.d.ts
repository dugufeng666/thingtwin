import { AvatarProps } from '../avatar';
import { TextareaProps } from '../textarea';
import { CollapsePanelProps } from '../collapse';
import { CollapseValue } from '../collapse';
import { TNode } from '../common';
export interface TdChatProps {
    actions?: TNode;
    animation?: 'skeleton' | 'moving' | 'gradient';
    avatar?: TNode<{
        item: TdChatItemProps;
        index: number;
    }>;
    clearHistory?: boolean;
    content?: TNode<{
        item: TdChatItemProps;
        index: number;
    }>;
    data?: Array<TdChatItemMeta>;
    datetime?: TNode<{
        item: TdChatItemProps;
        index: number;
    }>;
    isStreamLoad?: boolean;
    layout?: 'both' | 'single';
    name?: TNode<{
        item: TdChatItemProps;
        index: number;
    }>;
    reasoning?: TNode<{
        item: TdChatItemProps;
        index: number;
    }>;
    reverse?: boolean;
    textLoading?: boolean;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onScroll?: (context: {
        e: MouseEvent;
    }) => void;
}
export interface ChatInstanceFunctions {
    scrollToBottom?: (params: ScrollToBottomParams) => void;
}
export interface TdChatLoadingProps {
    animation?: 'moving' | 'gradient';
    text?: string;
}
export interface TdChatItemProps {
    actions?: string | TNode;
    animation?: 'skeleton' | 'moving' | 'gradient';
    avatar?: String | AvatarProps | TNode;
    content?: string | TNode;
    datetime?: string | TNode;
    name?: string | TNode;
    reasoning?: boolean | TdChatReasoning;
    role?: 'user' | 'assistant' | 'error' | 'model-change' | 'system';
    textLoading?: boolean;
    variant?: 'base' | 'outline' | 'text';
}
export interface TdChatContentProps {
    content?: string;
    role?: 'user' | 'assistant' | 'error' | 'model-change' | 'system';
}
export interface TdChatActionProps {
    content?: string;
    disabled?: boolean;
    isBad?: boolean;
    isGood?: boolean;
    operationBtn?: Array<'replay' | 'copy' | 'good' | 'bad'>;
    onOperation?: (value: string, context: {
        e: MouseEvent;
    }) => void;
}
export interface TdChatInputProps {
    autofocus?: boolean;
    autosize?: boolean | {
        minRows?: number;
        maxRows?: number;
    };
    disabled?: boolean;
    placeholder?: string;
    stopDisabled?: boolean;
    suffixIcon?: TNode;
    value?: string;
    defaultValue?: string;
    modelValue?: string;
    onBlur?: (value: string, context: {
        e: FocusEvent;
    }) => void;
    onChange?: (value: string, context: {
        e: InputEvent | MouseEvent | KeyboardEvent;
    }) => void;
    onFocus?: (value: string, context: {
        e: FocusEvent;
    }) => void;
    onSend?: (value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void;
    onStop?: (value: string, context: {
        e: MouseEvent;
    }) => void;
}
export interface TdChatSenderProps {
    disabled?: boolean;
    placeholder?: string;
    prefix?: string | TNode;
    stopDisabled?: boolean;
    suffix?: string | TNode;
    textareaProps?: TextareaProps;
    value?: string;
    defaultValue?: string;
    modelValue?: string;
    onBlur?: (value: string, context: {
        e: FocusEvent;
    }) => void;
    onChange?: (value: string, context: {
        e: InputEvent | MouseEvent | KeyboardEvent;
    }) => void;
    onFocus?: (value: string, context: {
        e: FocusEvent;
    }) => void;
    onSend?: (value: string, context: {
        e: MouseEvent | KeyboardEvent;
    }) => void;
    onStop?: (value: string, context: {
        e: MouseEvent;
    }) => void;
}
export interface TdChatReasoningProps {
    collapsePanelProps?: CollapsePanelProps;
    expandIcon?: TNode;
    expandIconPlacement?: 'left' | 'right';
    header?: TNode;
    headerRightContent?: TNode;
    onExpandChange?: (value: CollapseValue) => void;
}
export interface TdChatItemMeta {
    avatar?: string;
    name?: string;
    role?: string;
    datetime?: string;
    content?: string;
    reasoning?: string;
}
export type ScrollToBottomParams = {
    behavior: 'auto' | 'smooth';
};
export interface TdChatReasoning {
    expandIconPlacement?: 'left' | 'right';
    onExpandChange?: (isExpand: boolean) => void;
    collapsePanelProps?: Object;
}
