/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var upload_hooks_useDrag = require('../hooks/useDrag.js');
var upload_consts_index = require('../consts/index.js');
var hooks_tnode = require('../../_chunks/dep-db9cff9c.js');
require('../../_chunks/dep-dea5b5ff.js');
require('../../_chunks/dep-7bb1a236.js');
require('../../utils/render-tnode.js');
require('../../_chunks/dep-0e58cbbd.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-12a3fd02.js');
require('../../_chunks/dep-fa2fda14.js');
require('../../_chunks/dep-a76126df.js');
require('../../_chunks/dep-5247a460.js');
require('../../_chunks/dep-3a1cfa95.js');
require('../../_chunks/dep-6441bda0.js');
require('../../_chunks/dep-54b7116c.js');
require('../../_chunks/dep-36b83f83.js');
require('../../_chunks/dep-e2633705.js');
require('../../_chunks/dep-0b6e5f33.js');
require('../../_chunks/dep-3c0d3dc9.js');
require('../../_chunks/dep-4bb500b8.js');
require('../../_chunks/dep-5472dcbf.js');
require('../../_chunks/dep-1c142d75.js');
require('../../_chunks/dep-564b3613.js');
require('../../_chunks/dep-11fc6f95.js');
require('../../_chunks/dep-c3bc048f.js');
require('../../_chunks/dep-4479843a.js');
require('../../_chunks/dep-c1b17346.js');
require('../../_chunks/dep-84a0e81d.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CustomFile = Vue.defineComponent({
  name: "UploadCustomFile",
  props: _objectSpread(_objectSpread({}, upload_consts_index.commonProps), {}, {
    dragEvents: Object,
    draggable: Boolean,
    dragContent: Function,
    trigger: Function,
    triggerUpload: Function,
    childrenNode: [String, Function]
  }),
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var _toRefs = Vue.toRefs(props),
      classPrefix = _toRefs.classPrefix,
      displayFiles = _toRefs.displayFiles,
      accept = _toRefs.accept;
    var drag = upload_hooks_useDrag["default"](props.dragEvents, accept);
    var dragActive = drag.dragActive;
    var renderContent = hooks_tnode.useContent();
    var renderDragContent = function renderDragContent() {
      var _props$childrenNode;
      var params = {
        dragActive: dragActive.value || false,
        files: displayFiles.value
      };
      return Vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-upload__dragger ").concat(classPrefix.value, "-upload__dragger-center"),
        "onDrop": drag.handleDrop,
        "onDragenter": drag.handleDragenter,
        "onDragover": drag.handleDragover,
        "onDragleave": drag.handleDragleave,
        "onClick": props.triggerUpload
      }, [Vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-upload__trigger")
      }, [renderContent("dragContent", "trigger", {
        params: params
      }) || ((_props$childrenNode = props.childrenNode) === null || _props$childrenNode === void 0 ? void 0 : _props$childrenNode.call(props, params))])]);
    };
    return function () {
      var _props$childrenNode2, _slots$default;
      return Vue.createVNode(Vue.Fragment, null, [props.draggable ? renderDragContent() : Vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-upload__trigger"),
        "onClick": props.triggerUpload
      }, [((_props$childrenNode2 = props.childrenNode) === null || _props$childrenNode2 === void 0 ? void 0 : _props$childrenNode2.call(props, {
        files: displayFiles.value
      })) || ((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots))])]);
    };
  }
});

exports["default"] = CustomFile;
//# sourceMappingURL=custom-file.js.map
