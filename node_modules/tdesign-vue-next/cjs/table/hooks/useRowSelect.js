/**
 * tdesign v1.13.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var Vue = require('vue');
var hooks_useDefaultValue = require('../../hooks/useDefaultValue.js');
var utils = require('../../_chunks/dep-15e687b7.js');
var checkbox_index = require('../../checkbox/index.js');
var radio_index = require('../../radio/index.js');
var log = require('../../_chunks/dep-94e74ea7.js');
var intersection = require('../../_chunks/dep-a894d3be.js');
var get = require('../../_chunks/dep-3d3d9813.js');
var isFunction = require('../../_chunks/dep-c94b540e.js');
require('../../_chunks/dep-25e6caa1.js');
require('../../_chunks/dep-8675a24d.js');
require('../../_chunks/dep-7fc1ffe2.js');
require('../../_chunks/dep-39c9581c.js');
require('../../_chunks/dep-d7a38fb3.js');
require('../../_chunks/dep-b1f64980.js');
require('../../_chunks/dep-3b62827f.js');
require('../../checkbox/checkbox.js');
require('../../checkbox/props.js');
require('../../hooks/useVModel.js');
require('../../hooks/useRipple.js');
require('../../hooks/useKeepAnimation.js');
require('../../config-provider/hooks/useConfig.js');
require('../../_chunks/dep-47100b3a.js');
require('../../_chunks/dep-687d9447.js');
require('../../_chunks/dep-84fc4531.js');
require('dayjs');
require('../../_chunks/dep-22d9d967.js');
require('../../_chunks/dep-98fbf983.js');
require('../../_chunks/dep-5590274c.js');
require('../../_chunks/dep-104f7ee1.js');
require('../../_chunks/dep-f022423f.js');
require('../../_chunks/dep-a929bdb8.js');
require('../../_chunks/dep-00397a41.js');
require('../../_chunks/dep-92c5e4a5.js');
require('../../_chunks/dep-78a63892.js');
require('../../_chunks/dep-5d64466b.js');
require('../../_chunks/dep-689071d2.js');
require('../../_chunks/dep-edc40e94.js');
require('../../_chunks/dep-2ce2286c.js');
require('../../_chunks/dep-bb55dbeb.js');
require('../../_chunks/dep-e5e0508f.js');
require('../../_chunks/dep-8a241271.js');
require('../../_chunks/dep-c7e11941.js');
require('../../_chunks/dep-7279283f.js');
require('../../_chunks/dep-08fa391e.js');
require('../../_chunks/dep-565984b5.js');
require('../../_chunks/dep-e7786719.js');
require('../../_chunks/dep-2963fcd8.js');
require('../../_chunks/dep-96341f20.js');
require('../../hooks/useConfig.js');
require('../../_chunks/dep-00dea1d2.js');
require('../../_chunks/dep-8fa35315.js');
require('../../utils/render-tnode.js');
require('../../_chunks/dep-9f078572.js');
require('../../_chunks/dep-29224a9c.js');
require('../../_chunks/dep-5ae95903.js');
require('../../_chunks/dep-53ee0c65.js');
require('../../checkbox/consts/index.js');
require('../../checkbox/hooks/useCheckboxLazyLoad.js');
require('../../_chunks/dep-ae7ffc57.js');
require('../../checkbox/hooks/useKeyboardEvent.js');
require('../../_chunks/dep-1cf0bd44.js');
require('../../hooks/useDisabled.js');
require('../../_chunks/dep-b12afab7.js');
require('../../hooks/useReadonly.js');
require('../../checkbox/group.js');
require('../../checkbox/checkbox-group-props.js');
require('../../hooks/slot.js');
require('../../_chunks/dep-ceab8f85.js');
require('../../_chunks/dep-2766940c.js');
require('../../_chunks/dep-a3374be0.js');
require('../../utils/withInstall.js');
require('../../radio/radio.js');
require('../../radio/props.js');
require('../../radio/consts/index.js');
require('../../_chunks/dep-ec4a2dad.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../_chunks/dep-a8fcbdcc.js');
require('../../_chunks/dep-ec389751.js');
require('../../_chunks/dep-9ca23be8.js');
require('../../_chunks/dep-69e83dde.js');
require('../../_chunks/dep-b658bf06.js');
require('../../_chunks/dep-b84a0534.js');
require('../../radio/group.js');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('../../radio/radio-group-props.js');
require('../../radio/radio-button.js');
require('../../radio/hooks/useKeyboard.js');
require('../../utils/dom.js');
require('../../watermark/hooks/index.js');
require('../../hooks/useResizeObserver.js');
require('../../_chunks/dep-c062aeb0.js');
require('../../_chunks/dep-55d4f411.js');
require('../../_chunks/dep-fb7bcbec.js');
require('../../_chunks/dep-01fce6ff.js');
require('../../_chunks/dep-c6b053f2.js');
require('../../_chunks/dep-7456f387.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useRowSelect(props, tableSelectedClasses) {
  var _toRefs = Vue.toRefs(props),
    selectedRowKeys = _toRefs.selectedRowKeys,
    columns = _toRefs.columns,
    rowKey = _toRefs.rowKey,
    data = _toRefs.data,
    reserveSelectedRowOnPaginate = _toRefs.reserveSelectedRowOnPaginate,
    pagination = _toRefs.pagination;
  var currentPaginateData = Vue.ref(pagination.value ? data.value.slice((pagination.value.current - 1) * pagination.value.pageSize, pagination.value.current * pagination.value.pageSize) : data.value);
  var selectedRowClassNames = Vue.ref();
  var _useDefaultValue = hooks_useDefaultValue["default"](selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
    _useDefaultValue2 = _slicedToArray__default["default"](_useDefaultValue, 2),
    tSelectedRowKeys = _useDefaultValue2[0],
    setTSelectedRowKeys = _useDefaultValue2[1];
  var selectedRowDataMap = Vue.ref(/* @__PURE__ */new Map());
  var selectColumn = Vue.computed(function () {
    return props.columns.find(function (_ref) {
      var type = _ref.type;
      return ["multiple", "single"].includes(type);
    });
  });
  var selectionType = Vue.computed(function () {
    var _selectColumn$value;
    return props.rowSelectionType || ((_selectColumn$value = selectColumn.value) === null || _selectColumn$value === void 0 ? void 0 : _selectColumn$value.type) || "single";
  });
  var canSelectedRows = Vue.computed(function () {
    var currentData = reserveSelectedRowOnPaginate.value ? data.value : currentPaginateData.value;
    return currentData.filter(function (row, rowIndex) {
      return !isDisabled(row, rowIndex);
    });
  });
  var intersectionKeys = Vue.computed(function () {
    return intersection.intersection(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
      return get.get(t, props.rowKey || "id");
    }));
  });
  var allowUncheck = Vue.computed(function () {
    var _selectColumn$value2, _selectColumn$value3;
    if (props.rowSelectionAllowUncheck) return true;
    var singleSelectCol = selectionType.value === "single";
    if (!singleSelectCol || !((_selectColumn$value2 = selectColumn.value) !== null && _selectColumn$value2 !== void 0 && _selectColumn$value2.checkProps) || !("allowUncheck" in ((_selectColumn$value3 = selectColumn.value) === null || _selectColumn$value3 === void 0 ? void 0 : _selectColumn$value3.checkProps))) return false;
    return selectColumn.value.checkProps.allowUncheck;
  });
  Vue.watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
    var _selectColumn$value4;
    var disabledRowFunc = function disabledRowFunc(p) {
      return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
    };
    var disabledRowClass = (_selectColumn$value4 = selectColumn.value) !== null && _selectColumn$value4 !== void 0 && _selectColumn$value4.disabled ? disabledRowFunc : void 0;
    var selected = new Set(tSelectedRowKeys.value);
    var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
      var row = _ref2.row;
      var rowId = get.get(row, props.rowKey || "id");
      return selected.has(rowId) ? tableSelectedClasses.selected : "";
    };
    var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
    selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
  }, {
    immediate: true
  });
  Vue.watch(data, function () {
    currentPaginateData.value = data.value;
  });
  function isDisabled(row, rowIndex) {
    return utils.isRowSelectedDisabled(selectColumn.value, row, rowIndex);
  }
  function getSelectedHeader() {
    return function () {
      var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
      var isChecked = intersectionKeys.value.length !== 0 && canSelectedRows.value.length !== 0 && intersectionKeys.value.length === canSelectedRows.value.length;
      return Vue.createVNode(checkbox_index.Checkbox, {
        "checked": isChecked,
        "indeterminate": isIndeterminate,
        "disabled": !canSelectedRows.value.length,
        "onChange": handleSelectAll
      }, null);
    };
  }
  function getRowSelectDisabledData(p) {
    var col = p.col,
      row = p.row,
      rowIndex = p.rowIndex;
    var disabled = isFunction.isFunction(col.disabled) ? col.disabled({
      row: row,
      rowIndex: rowIndex
    }) : col.disabled;
    var checkProps = isFunction.isFunction(col.checkProps) ? col.checkProps({
      row: row,
      rowIndex: rowIndex
    }) : col.checkProps;
    return {
      disabled: disabled || (checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled),
      checkProps: checkProps
    };
  }
  function renderSelectCell(p) {
    var column = p.col,
      _p$row = p.row,
      row = _p$row === void 0 ? {} : _p$row;
    var checked = tSelectedRowKeys.value.includes(get.get(row, props.rowKey || "id"));
    var _getRowSelectDisabled = getRowSelectDisabledData(p),
      disabled = _getRowSelectDisabled.disabled,
      checkProps = _getRowSelectDisabled.checkProps;
    var selectBoxProps = _objectSpread(_objectSpread({
      checked: checked,
      disabled: disabled
    }, checkProps), {}, {
      onClick: function onClick(e) {
        if (_typeof__default["default"](e) === "object" && "e" in e) {
          var _e$e;
          (_e$e = e.e) === null || _e$e === void 0 || _e$e.stopPropagation();
        } else {
          e === null || e === void 0 || e.stopPropagation();
        }
      },
      onChange: function onChange() {
        return handleSelectChange(row);
      }
    });
    if (column.type === "single") return Vue.createVNode(radio_index.Radio, selectBoxProps, null);
    if (column.type === "multiple") {
      var _props$indeterminateS;
      var isIndeterminate = (_props$indeterminateS = props.indeterminateSelectedRowKeys) !== null && _props$indeterminateS !== void 0 && _props$indeterminateS.length ? props.indeterminateSelectedRowKeys.includes(get.get(row, props.rowKey)) : false;
      return Vue.createVNode(checkbox_index.Checkbox, Vue.mergeProps({
        "indeterminate": isIndeterminate
      }, selectBoxProps), null);
    }
    return null;
  }
  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var selectedRowKeys2 = _toConsumableArray__default["default"](tSelectedRowKeys.value);
    var reRowKey = props.rowKey || "id";
    var id = get.get(row, reRowKey);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;
    if (selectionType.value === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectionType.value === "single") {
      selectedRowKeys2 = isExisted && allowUncheck.value ? [] : [id];
    } else {
      log.log.warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }
    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: selectedRowKeys2.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }
  function handleSelectAll(checked) {
    var _selectedRowKeys$valu;
    var reRowKey = props.rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
      return get.get(record, reRowKey);
    });
    var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(_toConsumableArray__default["default"](disabledSelectedRowKeys), _toConsumableArray__default["default"](canSelectedRowKeys)) : _toConsumableArray__default["default"](disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: checked ? allIds.map(function (t) {
        return selectedRowDataMap.value.get(t);
      }) : [],
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }
  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection) return col;
    return _objectSpread(_objectSpread({}, col), {}, {
      width: col.width || 64,
      className: [tableSelectedClasses.checkCell, col.className],
      cell: function cell(_, p) {
        return renderSelectCell(p);
      },
      title: col.type === "multiple" ? getSelectedHeader() : col.title
    });
  }
  var onInnerSelectRowClick = function onInnerSelectRowClick(_ref3) {
    var row = _ref3.row,
      index = _ref3.index;
    var selectedColIndex = props.columns.findIndex(function (item) {
      return item.colKey === "row-select";
    });
    var disabled = false;
    if (selectedColIndex !== -1) {
      var _getRowSelectDisabled2;
      disabled = (_getRowSelectDisabled2 = getRowSelectDisabledData({
        row: row,
        rowIndex: index,
        col: props.columns[selectedColIndex],
        colIndex: selectedColIndex
      })) === null || _getRowSelectDisabled2 === void 0 ? void 0 : _getRowSelectDisabled2.disabled;
    }
    if (disabled) return;
    handleSelectChange(row);
  };
  Vue.watch([data, rowKey], function () {
    for (var i = 0, len = data.value.length; i < len; i++) {
      selectedRowDataMap.value.set(get.get(data.value[i], rowKey.value || "id"), data.value[i]);
    }
  }, {
    immediate: true
  });
  var showRowSelect = Vue.computed(function () {
    return Boolean(selectColumn.value || props.selectOnRowClick || props.selectedRowKeys);
  });
  var clearAllSelectedRowKeys = function clearAllSelectedRowKeys() {
    setTSelectedRowKeys([], {
      selectedRowData: [],
      currentRowKey: void 0,
      currentRowData: void 0,
      type: "uncheck"
    });
  };
  var handleRowSelectWithAreaSelection = function handleRowSelectWithAreaSelection(_ref4) {
    var activeRowList = _ref4.activeRowList,
      action = _ref4.action;
    if (!showRowSelect.value) return;
    if (action === "clear") {
      clearAllSelectedRowKeys();
      return;
    }
    if (action === "select-all") {
      handleSelectAll(true);
      return;
    }
    if (selectionType.value === "single") {
      if (action === "space-one-selection") {
        handleSelectChange(activeRowList[0].row);
      }
      return;
    }
    var validAreaSelection = activeRowList.filter(function (_ref5) {
      var row = _ref5.row,
        rowIndex = _ref5.rowIndex;
      return !getRowSelectDisabledData({
        row: row,
        rowIndex: rowIndex,
        col: selectColumn.value,
        colIndex: void 0
      }).disabled;
    });
    if (!validAreaSelection.length) return;
    var areaSelectionKeys = validAreaSelection.map(function (_ref6) {
      var row = _ref6.row;
      return get.get(row, props.rowKey);
    });
    var intersectionKeys2 = intersection.intersection(tSelectedRowKeys.value, areaSelectionKeys);
    var toCheck = intersectionKeys2.length !== areaSelectionKeys.length;
    var clearedKeys = tSelectedRowKeys.value.filter(function (key) {
      return !areaSelectionKeys.includes(key);
    });
    var newSelectedRowKeys = toCheck ? _toConsumableArray__default["default"](new Set(tSelectedRowKeys.value.concat(areaSelectionKeys))) : clearedKeys;
    var currentRowData = action === "space-one-selection" ? activeRowList[0].row : void 0;
    setTSelectedRowKeys(newSelectedRowKeys, {
      selectedRowData: activeRowList,
      currentRowKey: get.get(currentRowData, props.rowKey),
      currentRowData: currentRowData,
      type: toCheck ? "check" : "uncheck"
    });
  };
  return {
    selectColumn: selectColumn,
    showRowSelect: showRowSelect,
    selectedRowClassNames: selectedRowClassNames,
    currentPaginateData: currentPaginateData,
    setTSelectedRowKeys: setTSelectedRowKeys,
    formatToRowSelectColumn: formatToRowSelectColumn,
    onInnerSelectRowClick: onInnerSelectRowClick,
    handleRowSelectWithAreaSelection: handleRowSelectWithAreaSelection
  };
}

exports["default"] = useRowSelect;
//# sourceMappingURL=useRowSelect.js.map
