/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var configProvider_utils_context = require('../../_chunks/dep-ede16f7f.js');
var cloneDeep = require('../../_chunks/dep-fcea8340.js');
var isString = require('../../_chunks/dep-12a3fd02.js');
var isFunction = require('../../_chunks/dep-4bb500b8.js');
require('../../_chunks/dep-1d38e864.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-75a87f7c.js');
require('dayjs');
require('../../_chunks/dep-99110617.js');
require('../../_chunks/dep-5e2171e6.js');
require('../../_chunks/dep-ce3eb768.js');
require('../../_chunks/dep-4479843a.js');
require('../../_chunks/dep-fa2fda14.js');
require('../../_chunks/dep-0e58cbbd.js');
require('../../_chunks/dep-00f18931.js');
require('../../_chunks/dep-84a0e81d.js');
require('../../_chunks/dep-5247a460.js');
require('../../_chunks/dep-a76126df.js');
require('../../_chunks/dep-564b3613.js');
require('../../_chunks/dep-11fc6f95.js');
require('../../_chunks/dep-c3bc048f.js');
require('../../_chunks/dep-58abd685.js');
require('../../_chunks/dep-3a0b641f.js');
require('../../_chunks/dep-e6692a32.js');
require('../../_chunks/dep-10d5d599.js');
require('../../_chunks/dep-41ef4b47.js');
require('../../_chunks/dep-d0783150.js');
require('../../_chunks/dep-9e87e1e1.js');
require('../../_chunks/dep-2debdee8.js');
require('../../_chunks/dep-1c142d75.js');
require('../../_chunks/dep-c1b17346.js');
require('../../_chunks/dep-94fa6b5d.js');

var globalConfigCopy = Vue.ref();
function useConfig() {
  var componentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;
  var componentLocale = arguments.length > 1 ? arguments[1] : undefined;
  var injectGlobalConfig = Vue.getCurrentInstance() ? Vue.inject(configProvider_utils_context.configProviderInjectKey, null) : globalConfigCopy;
  var mergedGlobalConfig = Vue.computed(function () {
    return (injectGlobalConfig === null || injectGlobalConfig === void 0 ? void 0 : injectGlobalConfig.value) || configProvider_utils_context.defaultGlobalConfig;
  });
  var globalConfig = Vue.computed(function () {
    return Object.assign({}, mergedGlobalConfig.value[componentName], componentLocale);
  });
  var classPrefix = Vue.computed(function () {
    return mergedGlobalConfig.value.classPrefix;
  });
  var t = function t(pattern) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var data = args[0];
    if (isString.isString(pattern)) {
      if (!data) return pattern;
      var regular = /\{\s*([\w-]+)\s*\}/g;
      var translated = pattern.replace(regular, function (match, key) {
        if (data) {
          return String(data[key]);
        }
        return "";
      });
      return translated;
    }
    if (isFunction.isFunction(pattern)) {
      if (!args.length) return pattern(Vue.h);
      return pattern.apply(void 0, args);
    }
    return "";
  };
  return {
    t: t,
    global: globalConfig,
    globalConfig: globalConfig,
    classPrefix: classPrefix
  };
}
var provideConfig = function provideConfig(props) {
  var defaultData = cloneDeep.cloneDeep(configProvider_utils_context.defaultGlobalConfig);
  var mergedGlobalConfig = Vue.computed(function () {
    return Object.assign({}, configProvider_utils_context.mergeWith(defaultData, props.globalConfig));
  });
  Vue.provide(configProvider_utils_context.configProviderInjectKey, mergedGlobalConfig);
  if (!globalConfigCopy.value) {
    globalConfigCopy.value = mergedGlobalConfig.value;
  }
  return mergedGlobalConfig;
};

exports.provideConfig = provideConfig;
exports.useConfig = useConfig;
//# sourceMappingURL=useConfig.js.map
