/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var collapse_collapsePanelProps = require('./collapse-panel-props.js');
var commonComponents_fakeArrow = require('../common-components/fake-arrow.js');
var hooks_tnode = require('../_chunks/dep-db9cff9c.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_useCollapseAnimation = require('../hooks/useCollapseAnimation.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-0e58cbbd.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-12a3fd02.js');
require('../_chunks/dep-fa2fda14.js');
require('../_chunks/dep-a76126df.js');
require('../_chunks/dep-5247a460.js');
require('../_chunks/dep-3a1cfa95.js');
require('../_chunks/dep-6441bda0.js');
require('../_chunks/dep-54b7116c.js');
require('../_chunks/dep-36b83f83.js');
require('../_chunks/dep-e2633705.js');
require('../_chunks/dep-0b6e5f33.js');
require('../_chunks/dep-3c0d3dc9.js');
require('../_chunks/dep-4bb500b8.js');
require('../_chunks/dep-5472dcbf.js');
require('../_chunks/dep-1c142d75.js');
require('../_chunks/dep-564b3613.js');
require('../_chunks/dep-11fc6f95.js');
require('../_chunks/dep-c3bc048f.js');
require('../_chunks/dep-4479843a.js');
require('../_chunks/dep-c1b17346.js');
require('../_chunks/dep-84a0e81d.js');
require('../config-provider/hooks/useConfig.js');
require('../_chunks/dep-ede16f7f.js');
require('../_chunks/dep-1d38e864.js');
require('../_chunks/dep-75a87f7c.js');
require('dayjs');
require('../_chunks/dep-99110617.js');
require('../_chunks/dep-5e2171e6.js');
require('../_chunks/dep-ce3eb768.js');
require('../_chunks/dep-00f18931.js');
require('../_chunks/dep-58abd685.js');
require('../_chunks/dep-3a0b641f.js');
require('../_chunks/dep-e6692a32.js');
require('../_chunks/dep-10d5d599.js');
require('../_chunks/dep-41ef4b47.js');
require('../_chunks/dep-d0783150.js');
require('../_chunks/dep-9e87e1e1.js');
require('../_chunks/dep-fcea8340.js');
require('../_chunks/dep-2debdee8.js');
require('../_chunks/dep-94fa6b5d.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var _CollapsePanel = Vue.defineComponent({
  name: "TCollapsePanel",
  props: collapse_collapsePanelProps["default"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var componentName = hooks_useConfig.usePrefixClass("collapse-panel");
    var disableClass = hooks_useConfig.usePrefixClass("is-disabled");
    var clickableClass = hooks_useConfig.usePrefixClass("is-clickable");
    var transitionClass = hooks_useConfig.usePrefixClass("slide-down");
    var _toRefs = Vue.toRefs(props2),
      value = _toRefs.value,
      disabled = _toRefs.disabled,
      destroyOnCollapse = _toRefs.destroyOnCollapse;
    var collapseValue = Vue.inject("collapseValue");
    var updateCollapseValue = Vue.inject("updateCollapseValue");
    var getUniqId = Vue.inject("getUniqId", function () {
      return void 0;
    }, false);
    var _inject = Vue.inject("collapseProps"),
      defaultExpandAll = _inject.defaultExpandAll,
      disableAll = _inject.disabled,
      expandIconPlacement = _inject.expandIconPlacement,
      expandOnRowClick = _inject.expandOnRowClick;
    var renderParentTNode = Vue.inject("renderParentTNode");
    var innerValue = value.value || getUniqId();
    if (defaultExpandAll.value) {
      updateCollapseValue(innerValue);
    }
    var _useCollapseAnimation = hooks_useCollapseAnimation["default"](),
      beforeEnter = _useCollapseAnimation.beforeEnter,
      enter = _useCollapseAnimation.enter,
      afterEnter = _useCollapseAnimation.afterEnter,
      beforeLeave = _useCollapseAnimation.beforeLeave,
      leave = _useCollapseAnimation.leave,
      afterLeave = _useCollapseAnimation.afterLeave;
    var iconRef = Vue.ref();
    var isDisabled = Vue.computed(function () {
      return disabled.value || disableAll.value;
    });
    var isActive = Vue.computed(function () {
      return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
    });
    var classes = Vue.computed(function () {
      return [componentName.value, _defineProperty__default["default"]({}, disableClass.value, isDisabled.value)];
    });
    var panelExpandIcon = Vue.computed(function () {
      return slots.expandIcon || props2.expandIcon;
    });
    var handleClick = function handleClick(e) {
      var canExpand = expandOnRowClick.value || e.currentTarget === iconRef.value;
      if (canExpand && !isDisabled.value) {
        updateCollapseValue(innerValue);
      }
      e.stopPropagation();
    };
    var handleHeaderRightContentClick = function handleHeaderRightContentClick(e) {
      e.stopPropagation();
    };
    var renderDefaultIcon = function renderDefaultIcon() {
      return Vue.createVNode(commonComponents_fakeArrow["default"], {
        "overlayClassName": "".concat(componentName.value, "__icon--default")
      }, null);
    };
    var renderIcon = function renderIcon() {
      var tNodeRender = panelExpandIcon.value === void 0 ? renderParentTNode : renderTNodeJSX;
      return Vue.createVNode("div", {
        "ref": iconRef,
        "class": "".concat(componentName.value, "__icon ").concat(componentName.value, "__icon--").concat(expandIconPlacement.value, " ").concat(isActive.value ? "".concat(componentName.value, "__icon--active") : ""),
        "onClick": handleClick
      }, [tNodeRender("expandIcon", renderDefaultIcon())]);
    };
    var renderBlank = function renderBlank() {
      return Vue.createVNode("div", {
        "class": "".concat(componentName.value, "__header--blank")
      }, null);
    };
    var renderHeaderRightContent = function renderHeaderRightContent() {
      var headerRightContent = renderTNodeJSX("headerRightContent");
      return headerRightContent ? Vue.createVNode("div", {
        "onClick": handleHeaderRightContentClick
      }, [headerRightContent]) : null;
    };
    var renderHeader = function renderHeader() {
      var cls = ["".concat(componentName.value, "__header"), _defineProperty__default["default"]({}, clickableClass.value, expandOnRowClick.value && !isDisabled.value)];
      return Vue.createVNode("div", {
        "class": cls,
        "onClick": handleClick
      }, [expandIconPlacement.value === "left" && renderIcon(), renderTNodeJSX("header"), renderBlank(), renderHeaderRightContent(), expandIconPlacement.value === "right" && renderIcon()]);
    };
    var renderBodyByNormal = function renderBodyByNormal() {
      return Vue.withDirectives(Vue.createVNode("div", {
        "class": "".concat(componentName.value, "__body")
      }, [Vue.createVNode("div", {
        "class": "".concat(componentName.value, "__content")
      }, [renderContent("default", "content")])]), [[Vue.vShow, isActive.value]]);
    };
    var renderBodyDestroyOnCollapse = function renderBodyDestroyOnCollapse() {
      return isActive.value ? Vue.createVNode("div", {
        "class": "".concat(componentName.value, "__body")
      }, [Vue.createVNode("div", {
        "class": "".concat(componentName.value, "__content")
      }, [renderContent("default", "content")])]) : null;
    };
    var renderBody = function renderBody() {
      return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();
    };
    return function () {
      var _slot;
      return Vue.createVNode("div", {
        "class": classes.value
      }, [Vue.createVNode("div", {
        "class": "".concat(componentName.value, "__wrapper")
      }, [renderHeader(), Vue.createVNode(Vue.Transition, {
        "name": transitionClass.value,
        "onBeforeEnter": beforeEnter,
        "onEnter": enter,
        "onAfterEnter": afterEnter,
        "onBeforeLeave": beforeLeave,
        "onLeave": leave,
        "onAfterLeave": afterLeave
      }, _isSlot(_slot = renderBody()) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })])]);
    };
  }
});

exports["default"] = _CollapsePanel;
//# sourceMappingURL=collapse-panel.js.map
