/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var autoComplete_highlightOption = require('../_chunks/dep-da4eb0b2.js');
var log = require('../_chunks/dep-7bb1a236.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var utils_dom = require('../utils/dom.js');
var common = require('../_chunks/dep-d1e9ac5b.js');
var configProvider_hooks_useConfig = require('../config-provider/hooks/useConfig.js');
var isString = require('../_chunks/dep-12a3fd02.js');
var isFunction = require('../_chunks/dep-4bb500b8.js');
require('../_chunks/dep-6441bda0.js');
require('../_chunks/dep-fa2fda14.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-a76126df.js');
require('../_chunks/dep-54b7116c.js');
require('../_chunks/dep-5247a460.js');
require('../_chunks/dep-ede16f7f.js');
require('../_chunks/dep-1d38e864.js');
require('../_chunks/dep-75a87f7c.js');
require('dayjs');
require('../_chunks/dep-99110617.js');
require('../_chunks/dep-5e2171e6.js');
require('../_chunks/dep-ce3eb768.js');
require('../_chunks/dep-4479843a.js');
require('../_chunks/dep-0e58cbbd.js');
require('../_chunks/dep-00f18931.js');
require('../_chunks/dep-84a0e81d.js');
require('../_chunks/dep-564b3613.js');
require('../_chunks/dep-11fc6f95.js');
require('../_chunks/dep-c3bc048f.js');
require('../_chunks/dep-58abd685.js');
require('../_chunks/dep-3a0b641f.js');
require('../_chunks/dep-e6692a32.js');
require('../_chunks/dep-10d5d599.js');
require('../_chunks/dep-41ef4b47.js');
require('../_chunks/dep-d0783150.js');
require('../_chunks/dep-9e87e1e1.js');
require('../_chunks/dep-fcea8340.js');
require('../_chunks/dep-2debdee8.js');
require('../_chunks/dep-1c142d75.js');
require('../_chunks/dep-c1b17346.js');
require('../_chunks/dep-94fa6b5d.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AutoCompleteOptionList = Vue.defineComponent({
  name: "AutoCompleteOptionList",
  props: {
    sizeClassNames: Object,
    value: String,
    size: String,
    options: Array,
    popupVisible: Boolean,
    highlightKeyword: Boolean,
    filterable: Boolean,
    filter: Function,
    empty: [String, Function]
  },
  emits: ["select"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit,
      slots = _ref.slots,
      expose = _ref.expose;
    var active = Vue.ref("");
    var classPrefix = hooks_useConfig.usePrefixClass();
    var _useConfig = configProvider_hooks_useConfig.useConfig("autoComplete"),
      globalConfig = _useConfig.globalConfig;
    var classes = Vue.computed(function () {
      return "".concat(classPrefix.value, "-select__list");
    });
    var optionClasses = Vue.computed(function () {
      return ["".concat(classPrefix.value, "-select-option"), _defineProperty__default["default"]({}, props.sizeClassNames[props.size], props.size)];
    });
    var tOptions = Vue.computed(function () {
      var options = (props.options || []).map(function (item) {
        var option = {};
        if (isString.isString(item)) {
          option = {
            text: item,
            label: item
          };
        } else {
          if (item.text && !isString.isString(item.text)) {
            log.log.warn("AutoComplete", "`text` must be a string.");
          }
          if (!item.text) {
            if (isString.isString(item.label)) {
              option = _objectSpread(_objectSpread({}, item), {}, {
                text: item.label
              });
            } else {
              log.log.warn("AutoComplete", "one of `label` and `text` must be a existed string.");
            }
          } else {
            option = item;
          }
        }
        return option;
      });
      if (props.filter) {
        options = options.filter(function (option) {
          return props.filter(props.value, option);
        });
      } else if (props.filterable) {
        var regExp = new RegExp(autoComplete_highlightOption.escapeRegExp(props.value), "i");
        options = options.filter(function (item) {
          return regExp.test(item.text);
        });
      }
      return options;
    });
    var onOptionClick = function onOptionClick(e) {
      var liNode = e.target;
      while (liNode && liNode.tagName !== "LI") {
        liNode = liNode.parentNode;
      }
      var keyword = liNode.getAttribute("title");
      active.value = keyword;
      emit("select", keyword, {
        e: e
      });
    };
    var onKeyInnerPress = function onKeyInnerPress(e) {
      if (common.ARROW_UP_REG.test(e.code) || common.ARROW_UP_REG.test(e.key)) {
        var _tOptions$value$newIn;
        var index = tOptions.value.findIndex(function (item) {
          return item.text === active.value;
        });
        var newIndex = index - 1 < 0 ? tOptions.value.length - 1 : index - 1;
        active.value = (_tOptions$value$newIn = tOptions.value[newIndex]) === null || _tOptions$value$newIn === void 0 ? void 0 : _tOptions$value$newIn.text;
      } else if (common.ARROW_DOWN_REG.test(e.code) || common.ARROW_DOWN_REG.test(e.key)) {
        var _tOptions$value$_newI;
        var _index = tOptions.value.findIndex(function (item) {
          return item.text === active.value;
        });
        var _newIndex = _index + 1 >= tOptions.value.length ? 0 : _index + 1;
        active.value = (_tOptions$value$_newI = tOptions.value[_newIndex]) === null || _tOptions$value$_newI === void 0 ? void 0 : _tOptions$value$_newI.text;
      } else if (common.ENTER_REG.test(e.code) || common.ENTER_REG.test(e.key)) {
        if (active.value) {
          emit("select", active.value, {
            e: e
          });
        }
      }
    };
    var addKeyboardListener = function addKeyboardListener() {
      utils_dom.on(document, "keydown", onKeyInnerPress);
    };
    var removeKeyboardListener = function removeKeyboardListener() {
      utils_dom.off(document, "keydown", onKeyInnerPress);
    };
    expose({
      addKeyboardListener: addKeyboardListener,
      removeKeyboardListener: removeKeyboardListener
    });
    Vue.watch(function () {
      return props.popupVisible;
    }, function () {
      if (props.popupVisible) {
        addKeyboardListener();
      } else {
        removeKeyboardListener();
      }
    }, {
      immediate: true
    });
    Vue.watch(function () {
      return props.value;
    }, function () {
      if (!props.value) {
        active.value = "";
      }
    }, {
      immediate: true
    });
    Vue.onBeforeUnmount(function () {
      removeKeyboardListener();
    });
    return function () {
      if (!tOptions.value.length) {
        return Vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-auto-complete__panel--empty")
        }, [props.empty || globalConfig.value.empty]);
      }
      return Vue.createVNode("ul", {
        "class": classes.value
      }, [tOptions.value.map(function (item) {
        var cls = _toConsumableArray__default["default"](optionClasses.value);
        if (item.text === active.value) {
          cls.push("".concat(classPrefix.value, "-select-option--hover"));
        }
        var labelNode = item.label;
        if (isFunction.isFunction(item.label)) {
          labelNode = item.label(Vue.h);
        } else if (slots.option) {
          var _slots$option;
          labelNode = (_slots$option = slots.option) === null || _slots$option === void 0 ? void 0 : _slots$option.call(slots, {
            option: item
          });
        }
        var content = labelNode || item.text;
        return Vue.createVNode("li", {
          "key": item.text,
          "class": cls,
          "title": item.text,
          "onClick": onOptionClick
        }, [isString.isString(content) && props.highlightKeyword ? Vue.createVNode(autoComplete_highlightOption._HighlightOption, {
          "content": content,
          "keyword": props.value
        }, null) : content]);
      })]);
    };
  }
});

exports["default"] = AutoCompleteOptionList;
//# sourceMappingURL=option-list.js.map
