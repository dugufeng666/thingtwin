export interface Theme {
    [key: string]: {
        color?: string;
        background?: string;
        parentBackground?: string;
        ruleColor?: string;
        ruleOptions?: {
            background?: string;
            textColor?: string;
        };
    };
}
export declare const themeKeys: string[];
export declare const defaultTheme: Theme;
export declare const le5leTheme: {
    cssRuleSelector: string;
    style_prefix: string;
    vendor_css_prefix: string;
    dark: string[];
    light: string[];
    /**
     * @description 将单驼峰命名的字符串改成 小写单词加-的形式,从而将js单驼峰的规范改成css变量的规范
     * @author Joseph Ho
     * @date 08/01/2025
     * @param {*} str
     * @returns {*}
     */
    camelCaseToHyphenated(str: any): any;
    /**
     * @description 添加厂商前缀，如：--le-text-color-primary: #7f838c
     * @author Joseph Ho
     * @date 26/12/2024
     * @param {*} theme
     * @returns {*}
     */
    _addVendorCssPrefix(themeList: any): any;
    /**
     * @description 创建主题css变量样式表
     * @author Joseph Ho
     * @date 26/12/2024
     * @param {*} theme 主题名
     * @param {*} id 样式表id，用于查找样式表，确保唯一
     */
    createThemeSheet(theme: any, id: any): void;
    /**
     * @description 销毁主题样式表，根据id查找样式表并删除，释放内存空间，避免内存泄漏
     * @author Joseph Ho
     * @date 26/12/2024
     * @param {*} id
     */
    destroyThemeSheet(id: any): void;
    addTheme(name: any, theme: any): void;
    /**
     * @description 根据主题名称获取主题变量
     * @author Joseph Ho
     * @date 26/12/2024
     * @param {*} theme
     * @returns {*}
     */
    getTheme(theme: any): any;
    getThemeObj(theme?: string): any;
    /**
     * @description 根据id查找样式表
     * @author Joseph Ho
     * @date 26/12/2024
     * @param {*} id
     * @returns {*}
     */
    findStyleSheet(id: any): CSSStyleSheet;
    /**
     * @description 更新样式表的主题变量
     * @author Joseph Ho
     * @date 26/12/2024
     * @param {*} id
     * @param {*} theme
     */
    updateCssRule(id: any, themeName: any): void;
};
