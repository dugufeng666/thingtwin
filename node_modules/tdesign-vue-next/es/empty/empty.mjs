/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, toRefs, computed, createVNode, h } from 'vue';
import { isString, isPlainObject } from 'lodash-es';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import { u as useTNodeJSX } from '../_chunks/dep-8543d432.mjs';
import props from './props.mjs';
import { Image } from '../image/index.mjs';
import MaintenanceSvg from './components/MaintenanceSvg.mjs';
import NetworkErrorSvg from './components/NetworkErrorSvg.mjs';
import EmptySvg from './components/EmptySvg.mjs';
import FailSvg from './components/FailSvg.mjs';
import SuccessSvg from './components/SuccessSvg.mjs';
import { useConfig } from '../config-provider/hooks/useConfig.mjs';
import '../utils/render-tnode.mjs';
import '../image/image.mjs';
import '../_chunks/dep-ab7207a5.mjs';
import '../_chunks/dep-113544a7.mjs';
import 'tdesign-icons-vue-next';
import '../_chunks/dep-89acd0df.mjs';
import '../image/props.mjs';
import '../space/index.mjs';
import '../space/space.mjs';
import '../_chunks/dep-e32fd926.mjs';
import '../_chunks/dep-488f17e4.mjs';
import '../space/props.mjs';
import '../hooks/slot.mjs';
import '../_chunks/dep-e3b99a8c.mjs';
import '../_chunks/dep-2124b297.mjs';
import '../_chunks/dep-7c806dae.mjs';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-039819d3.mjs';
import '../_chunks/dep-39bc09f2.mjs';
import '../_chunks/dep-dd3530fb.mjs';
import '../_chunks/dep-eb5cf880.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../hooks/useImagePreviewUrl.mjs';
import '../_chunks/dep-6c2db117.mjs';
import '../_chunks/dep-c43dcdde.mjs';

var _Empty = defineComponent({
  name: "TEmpty",
  components: {
    TImage: Image
  },
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var _toRefs = toRefs(props2),
      size = _toRefs.size,
      propsImage = _toRefs.image,
      propsDescription = _toRefs.description,
      propsTitle = _toRefs.title,
      type = _toRefs.type;
    var _useConfig = useConfig("empty"),
      globalConfig = _useConfig.globalConfig;
    var classPrefix = usePrefixClass("empty");
    var showAction = computed(function () {
      return props2.action || slots.action;
    });
    var _useCommonClassName = useCommonClassName(),
      SIZE = _useCommonClassName.SIZE;
    var renderTNodeJSX = useTNodeJSX();
    var defaultMaps = {
      maintenance: {
        image: globalConfig.value.image.maintenance || MaintenanceSvg,
        title: globalConfig.value.titleText.maintenance
      },
      success: {
        image: globalConfig.value.image.success || SuccessSvg,
        title: globalConfig.value.titleText.success
      },
      fail: {
        image: globalConfig.value.image.fail || FailSvg,
        title: globalConfig.value.titleText.fail
      },
      "network-error": {
        image: globalConfig.value.image.networkError || NetworkErrorSvg,
        title: globalConfig.value.titleText.networkError
      },
      empty: {
        image: globalConfig.value.image.empty || EmptySvg,
        title: globalConfig.value.titleText.empty
      }
    };
    var emptyClasses = computed(function () {
      return [classPrefix.value, SIZE.value[size.value]];
    });
    var titleClasses = ["".concat(classPrefix.value, "__title")];
    var imageClasses = ["".concat(classPrefix.value, "__image")];
    var descriptionClasses = ["".concat(classPrefix.value, "__description")];
    var actionClass = ["".concat(classPrefix.value, "__action")];
    var typeImageProps = computed(function () {
      var _defaultMaps$type$val;
      return (_defaultMaps$type$val = defaultMaps[type.value]) !== null && _defaultMaps$type$val !== void 0 ? _defaultMaps$type$val : null;
    });
    var showImage = computed(function () {
      var _slots$image, _typeImageProps$value;
      return propsImage.value || (slots === null || slots === void 0 || (_slots$image = slots.image) === null || _slots$image === void 0 ? void 0 : _slots$image.call(slots)) || ((_typeImageProps$value = typeImageProps.value) === null || _typeImageProps$value === void 0 ? void 0 : _typeImageProps$value.image);
    });
    var showTitle = computed(function () {
      var _slots$title, _typeImageProps$value2;
      return propsTitle.value || (slots === null || slots === void 0 || (_slots$title = slots.title) === null || _slots$title === void 0 ? void 0 : _slots$title.call(slots)) || ((_typeImageProps$value2 = typeImageProps.value) === null || _typeImageProps$value2 === void 0 ? void 0 : _typeImageProps$value2.title);
    });
    var showDescription = computed(function () {
      var _slots$description;
      return propsDescription.value || (slots === null || slots === void 0 || (_slots$description = slots.description) === null || _slots$description === void 0 ? void 0 : _slots$description.call(slots));
    });
    var renderTitle = function renderTitle() {
      if (!showTitle.value) {
        return null;
      }
      return createVNode("div", {
        "class": titleClasses
      }, [showTitle.value]);
    };
    var renderDescription = function renderDescription() {
      if (!showDescription.value) {
        return null;
      }
      return createVNode("div", {
        "class": descriptionClasses
      }, [showDescription.value]);
    };
    var getImageIns = function getImageIns() {
      var data = showImage.value;
      var result = null;
      if (isString(data)) {
        result = createVNode(Image, {
          "src": data
        }, null);
      } else if (data && Reflect.has(data, "setup")) {
        result = h(data);
      } else if (isPlainObject(data)) {
        result = createVNode(Image, data, null);
      }
      return data ? result : null;
    };
    return function () {
      return createVNode("div", {
        "class": emptyClasses.value
      }, [showImage.value ? createVNode("div", {
        "class": imageClasses,
        "style": props2.imageStyle
      }, [slots !== null && slots !== void 0 && slots.image ? renderTNodeJSX("image") : getImageIns()]) : null, renderTitle(), renderDescription(), showAction.value ? createVNode("div", {
        "class": actionClass
      }, [renderTNodeJSX("action")]) : null]);
    };
  }
});

export { _Empty as default };
//# sourceMappingURL=empty.mjs.map
