/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var MockSSEResponse = /*#__PURE__*/function () {
  function MockSSEResponse(data) {
    var _this = this;
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
    var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    _classCallCheck__default["default"](this, MockSSEResponse);
    _defineProperty__default["default"](this, "controller", void 0);
    _defineProperty__default["default"](this, "encoder", new TextEncoder());
    _defineProperty__default["default"](this, "stream", void 0);
    _defineProperty__default["default"](this, "error", void 0);
    this.data = data;
    this.delay = delay;
    this.error = error;
    this.stream = new ReadableStream({
      start: function start(controller) {
        _this.controller = controller;
        if (!_this.error) {
          setTimeout(function () {
            return _this.pushData();
          }, _this.delay);
        }
      },
      cancel: function cancel() {}
    });
  }
  return _createClass__default["default"](MockSSEResponse, [{
    key: "pushData",
    value: function pushData() {
      var _this2 = this;
      if (this.data.length === 0) {
        this.controller.close();
        return;
      }
      try {
        var chunk = this.data.slice(0, 1);
        this.data = this.data.slice(1);
        this.controller.enqueue(this.encoder.encode(chunk));
        if (this.data.length > 0) {
          setTimeout(function () {
            return _this2.pushData();
          }, this.delay);
        } else {
          setTimeout(function () {
            return _this2.controller.close();
          }, this.delay);
        }
      } catch (_unused) {}
    }
  }, {
    key: "getResponse",
    value: function getResponse() {
      var _this3 = this;
      return new Promise(function (resolve) {
        setTimeout(function () {
          if (_this3.error) {
            var errorResponseOptions = {
              status: 500,
              statusText: "Internal Server Error"
            };
            resolve(new Response(null, errorResponseOptions));
          } else {
            resolve(new Response(_this3.stream));
          }
        }, _this3.delay);
      });
    }
  }]);
}();

exports.MockSSEResponse = MockSSEResponse;
//# sourceMappingURL=sseRequest.js.map
