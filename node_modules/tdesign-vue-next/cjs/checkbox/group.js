/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _typeof = require('@babel/runtime/helpers/typeof');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var Vue = require('vue');
var checkbox_checkbox = require('./checkbox.js');
var checkbox_checkboxGroupProps = require('./checkbox-group-props.js');
var checkbox_consts_index = require('./consts/index.js');
var hooks_useVModel = require('../hooks/useVModel.js');
var hooks_useConfig = require('../hooks/useConfig.js');
var hooks_tnode = require('../_chunks/dep-db9cff9c.js');
var hooks_slot = require('../hooks/slot.js');
var intersection = require('../_chunks/dep-e2429209.js');
var isUndefined = require('../_chunks/dep-6bdaf809.js');
var isObject = require('../_chunks/dep-0e58cbbd.js');
require('@babel/runtime/helpers/defineProperty');
require('./props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../config-provider/hooks/useConfig.js');
require('../_chunks/dep-ede16f7f.js');
require('../_chunks/dep-1d38e864.js');
require('../_chunks/dep-75a87f7c.js');
require('dayjs');
require('../_chunks/dep-99110617.js');
require('../_chunks/dep-5e2171e6.js');
require('../_chunks/dep-ce3eb768.js');
require('../_chunks/dep-4479843a.js');
require('../_chunks/dep-4bb500b8.js');
require('../_chunks/dep-fa2fda14.js');
require('../_chunks/dep-00f18931.js');
require('../_chunks/dep-84a0e81d.js');
require('../_chunks/dep-5247a460.js');
require('../_chunks/dep-a76126df.js');
require('../_chunks/dep-564b3613.js');
require('../_chunks/dep-11fc6f95.js');
require('../_chunks/dep-c3bc048f.js');
require('../_chunks/dep-58abd685.js');
require('../_chunks/dep-3a0b641f.js');
require('../_chunks/dep-e6692a32.js');
require('../_chunks/dep-10d5d599.js');
require('../_chunks/dep-41ef4b47.js');
require('../_chunks/dep-d0783150.js');
require('../_chunks/dep-9e87e1e1.js');
require('../_chunks/dep-fcea8340.js');
require('../_chunks/dep-2debdee8.js');
require('../_chunks/dep-1c142d75.js');
require('../_chunks/dep-c1b17346.js');
require('../_chunks/dep-94fa6b5d.js');
require('../_chunks/dep-12a3fd02.js');
require('../_chunks/dep-0290afd5.js');
require('./hooks/useCheckboxLazyLoad.js');
require('../_chunks/dep-8c390b09.js');
require('./hooks/useKeyboardEvent.js');
require('../_chunks/dep-d1e9ac5b.js');
require('../hooks/useDisabled.js');
require('../_chunks/dep-1e4a8214.js');
require('../hooks/useReadonly.js');
require('../_chunks/dep-3c0d3dc9.js');
require('../_chunks/dep-0b6e5f33.js');
require('../_chunks/dep-6441bda0.js');
require('../_chunks/dep-54b7116c.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-3a1cfa95.js');
require('../_chunks/dep-36b83f83.js');
require('../_chunks/dep-e2633705.js');
require('../_chunks/dep-5472dcbf.js');
require('../_chunks/dep-425a3c77.js');
require('../_chunks/dep-6d957e14.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var _Group = Vue.defineComponent({
  name: "TCheckboxGroup",
  props: checkbox_checkboxGroupProps["default"],
  setup: function setup(props2) {
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("checkbox-group");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var isArray = Array.isArray;
    var _toRefs = Vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = hooks_useVModel["default"](value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var optionList = Vue.ref([]);
    var intersectionLen = Vue.computed(function () {
      if (!isArray(innerValue.value)) return 0;
      var values = optionList.value.map(function (item) {
        return item.value;
      });
      var n = intersection.intersection(innerValue.value, values);
      return n.length;
    });
    var isCheckAll = Vue.computed(function () {
      var optionItems = optionList.value.filter(function (item) {
        return !item.disabled && !item.readonly && !item.checkAll;
      }).map(function (t) {
        return t.value;
      });
      var intersectionValues = intersection.intersection(optionItems, innerValue.value);
      return intersectionValues.length === optionItems.length;
    });
    var indeterminate = Vue.computed(function () {
      return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
    });
    var maxExceeded = Vue.computed(function () {
      return !isUndefined.isUndefined(props2.max) && innerValue.value.length === props2.max;
    });
    Vue.watchEffect(function () {
      if (!props2.options) return [];
      optionList.value = props2.options.map(function (item) {
        return isObject.isObject(item) ? item : {
          label: String(item),
          value: item
        };
      });
    });
    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();
      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.disabled) continue;
        if (item.readonly) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }
      return _toConsumableArray__default["default"](val);
    };
    var onCheckAllChange = function onCheckAllChange(checked, context) {
      var value2 = checked ? getAllCheckboxValue() : [];
      setInnerValue(value2, {
        e: context.e,
        type: checked ? "check" : "uncheck",
        current: void 0,
        option: void 0
      });
    };
    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;
      if (!isArray(innerValue.value)) {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof__default["default"](innerValue.value)));
        return;
      }
      var val = _toConsumableArray__default["default"](innerValue.value);
      if (data.checked) {
        val.push(currentValue);
      } else {
        var i = val.indexOf(currentValue);
        val.splice(i, 1);
      }
      setInnerValue(val, {
        e: data.e,
        current: data.option.value,
        option: data.option,
        type: data.checked ? "check" : "uncheck"
      });
    };
    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
        checkAll = p.checkAll,
        e = p.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };
    var getChildComponentSlots = hooks_slot.useChildComponentSlots();
    var getOptionListBySlots = function getOptionListBySlots() {
      var nodes = getChildComponentSlots("Checkbox");
      var arr = [];
      nodes === null || nodes === void 0 || nodes.forEach(function (node) {
        var option = node.props;
        if (!option) return;
        if (option["check-all"] === "" || option["check-all"] === true) {
          option.checkAll = true;
        }
        arr.push(option);
      });
      return arr;
    };
    Vue.provide(checkbox_consts_index.CheckboxGroupInjectionKey, Vue.computed(function () {
      return {
        name: props2.name,
        isCheckAll: isCheckAll.value,
        checkedValues: innerValue.value || [],
        maxExceeded: maxExceeded.value,
        disabled: props2.disabled,
        readonly: props2.readonly,
        indeterminate: indeterminate.value,
        handleCheckboxChange: handleCheckboxChange,
        onCheckedChange: onCheckedChange
      };
    }));
    return function () {
      var _props2$options;
      var children = null;
      if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
        var _optionList$value;
        children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function (option, index) {
          var _innerValue$value;
          return Vue.createVNode(checkbox_checkbox["default"], Vue.mergeProps({
            "key": "".concat(option.value || "").concat(index),
            "lazyLoad": props2.lazyLoad
          }, option, {
            "index": index,
            "checked": (_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value.includes(option.value),
            "data": option
          }), null);
        });
      } else {
        var nodes = renderTNodeJSX("default");
        optionList.value = getOptionListBySlots();
        children = nodes;
      }
      return Vue.createVNode("div", {
        "class": COMPONENT_NAME.value,
        "role": "group",
        "aria-label": "checkbox-group"
      }, [children]);
    };
  }
});

exports["default"] = _Group;
//# sourceMappingURL=group.js.map
