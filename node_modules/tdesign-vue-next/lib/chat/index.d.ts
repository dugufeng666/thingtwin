import { TdChatProps, TdChatItemProps, TdChatContentProps, TdChatActionProps, TdChatInputProps, TdChatSenderProps, TdChatReasoningProps, TdChatLoadingProps } from './type';
import './style';
export * from './type';
export type ChatProps = TdChatProps;
export type ChatItemProps = TdChatItemProps;
export type ChatContentProps = TdChatContentProps;
export type ChatActionProps = TdChatActionProps;
export type ChatInputProps = TdChatInputProps;
export type ChatSenderProps = TdChatSenderProps;
export type ChatReasoningProps = TdChatReasoningProps;
export type ChatLoadingProps = TdChatLoadingProps;
export declare const Chat: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<TdChatProps["actions"]>;
        };
        animation: {
            type: import("vue").PropType<TdChatProps["animation"]>;
            default: TdChatProps["animation"];
            validator(val: TdChatProps["animation"]): boolean;
        };
        avatar: {
            type: import("vue").PropType<TdChatProps["avatar"]>;
        };
        clearHistory: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<TdChatProps["content"]>;
        };
        data: {
            type: import("vue").PropType<TdChatProps["data"]>;
        };
        datetime: {
            type: import("vue").PropType<TdChatProps["datetime"]>;
        };
        isStreamLoad: BooleanConstructor;
        layout: {
            type: import("vue").PropType<TdChatProps["layout"]>;
            default: TdChatProps["layout"];
            validator(val: TdChatProps["layout"]): boolean;
        };
        name: {
            type: import("vue").PropType<TdChatProps["name"]>;
        };
        reasoning: {
            type: import("vue").PropType<TdChatProps["reasoning"]>;
        };
        reverse: {
            type: BooleanConstructor;
            default: boolean;
        };
        textLoading: BooleanConstructor;
        onClear: import("vue").PropType<TdChatProps["onClear"]>;
        onScroll: import("vue").PropType<TdChatProps["onScroll"]>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "clear")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<TdChatProps["actions"]>;
        };
        animation: {
            type: import("vue").PropType<TdChatProps["animation"]>;
            default: TdChatProps["animation"];
            validator(val: TdChatProps["animation"]): boolean;
        };
        avatar: {
            type: import("vue").PropType<TdChatProps["avatar"]>;
        };
        clearHistory: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<TdChatProps["content"]>;
        };
        data: {
            type: import("vue").PropType<TdChatProps["data"]>;
        };
        datetime: {
            type: import("vue").PropType<TdChatProps["datetime"]>;
        };
        isStreamLoad: BooleanConstructor;
        layout: {
            type: import("vue").PropType<TdChatProps["layout"]>;
            default: TdChatProps["layout"];
            validator(val: TdChatProps["layout"]): boolean;
        };
        name: {
            type: import("vue").PropType<TdChatProps["name"]>;
        };
        reasoning: {
            type: import("vue").PropType<TdChatProps["reasoning"]>;
        };
        reverse: {
            type: BooleanConstructor;
            default: boolean;
        };
        textLoading: BooleanConstructor;
        onClear: import("vue").PropType<TdChatProps["onClear"]>;
        onScroll: import("vue").PropType<TdChatProps["onScroll"]>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, {
        reverse: boolean;
        animation: "gradient" | "skeleton" | "moving";
        layout: "single" | "both";
        textLoading: boolean;
        clearHistory: boolean;
        isStreamLoad: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        actions: {
            type: import("vue").PropType<TdChatProps["actions"]>;
        };
        animation: {
            type: import("vue").PropType<TdChatProps["animation"]>;
            default: TdChatProps["animation"];
            validator(val: TdChatProps["animation"]): boolean;
        };
        avatar: {
            type: import("vue").PropType<TdChatProps["avatar"]>;
        };
        clearHistory: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<TdChatProps["content"]>;
        };
        data: {
            type: import("vue").PropType<TdChatProps["data"]>;
        };
        datetime: {
            type: import("vue").PropType<TdChatProps["datetime"]>;
        };
        isStreamLoad: BooleanConstructor;
        layout: {
            type: import("vue").PropType<TdChatProps["layout"]>;
            default: TdChatProps["layout"];
            validator(val: TdChatProps["layout"]): boolean;
        };
        name: {
            type: import("vue").PropType<TdChatProps["name"]>;
        };
        reasoning: {
            type: import("vue").PropType<TdChatProps["reasoning"]>;
        };
        reverse: {
            type: BooleanConstructor;
            default: boolean;
        };
        textLoading: BooleanConstructor;
        onClear: import("vue").PropType<TdChatProps["onClear"]>;
        onScroll: import("vue").PropType<TdChatProps["onScroll"]>;
    }>> & {
        onScroll?: (...args: any[]) => any;
        onClear?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        reverse: boolean;
        animation: "gradient" | "skeleton" | "moving";
        layout: "single" | "both";
        textLoading: boolean;
        clearHistory: boolean;
        isStreamLoad: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    actions: {
        type: import("vue").PropType<TdChatProps["actions"]>;
    };
    animation: {
        type: import("vue").PropType<TdChatProps["animation"]>;
        default: TdChatProps["animation"];
        validator(val: TdChatProps["animation"]): boolean;
    };
    avatar: {
        type: import("vue").PropType<TdChatProps["avatar"]>;
    };
    clearHistory: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<TdChatProps["content"]>;
    };
    data: {
        type: import("vue").PropType<TdChatProps["data"]>;
    };
    datetime: {
        type: import("vue").PropType<TdChatProps["datetime"]>;
    };
    isStreamLoad: BooleanConstructor;
    layout: {
        type: import("vue").PropType<TdChatProps["layout"]>;
        default: TdChatProps["layout"];
        validator(val: TdChatProps["layout"]): boolean;
    };
    name: {
        type: import("vue").PropType<TdChatProps["name"]>;
    };
    reasoning: {
        type: import("vue").PropType<TdChatProps["reasoning"]>;
    };
    reverse: {
        type: BooleanConstructor;
        default: boolean;
    };
    textLoading: BooleanConstructor;
    onClear: import("vue").PropType<TdChatProps["onClear"]>;
    onScroll: import("vue").PropType<TdChatProps["onScroll"]>;
}>> & {
    onScroll?: (...args: any[]) => any;
    onClear?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "clear")[], "scroll" | "clear", {
    reverse: boolean;
    animation: "gradient" | "skeleton" | "moving";
    layout: "single" | "both";
    textLoading: boolean;
    clearHistory: boolean;
    isStreamLoad: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ChatItem: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        reasoningLoading: {
            type: BooleanConstructor;
            default: boolean;
        };
        actions: {
            type: import("vue").PropType<TdChatItemProps["actions"]>;
        };
        animation: {
            type: import("vue").PropType<TdChatItemProps["animation"]>;
            default: TdChatItemProps["animation"];
            validator(val: TdChatItemProps["animation"]): boolean;
        };
        avatar: {
            type: import("vue").PropType<TdChatItemProps["avatar"]>;
        };
        content: {
            type: import("vue").PropType<TdChatItemProps["content"]>;
        };
        datetime: {
            type: import("vue").PropType<TdChatItemProps["datetime"]>;
        };
        name: {
            type: import("vue").PropType<TdChatItemProps["name"]>;
        };
        reasoning: {
            type: import("vue").PropType<TdChatItemProps["reasoning"]>;
            default: TdChatItemProps["reasoning"];
        };
        role: {
            type: import("vue").PropType<TdChatItemProps["role"]>;
            validator(val: TdChatItemProps["role"]): boolean;
        };
        textLoading: BooleanConstructor;
        variant: {
            type: import("vue").PropType<TdChatItemProps["variant"]>;
            default: TdChatItemProps["variant"];
            validator(val: TdChatItemProps["variant"]): boolean;
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        reasoningLoading: {
            type: BooleanConstructor;
            default: boolean;
        };
        actions: {
            type: import("vue").PropType<TdChatItemProps["actions"]>;
        };
        animation: {
            type: import("vue").PropType<TdChatItemProps["animation"]>;
            default: TdChatItemProps["animation"];
            validator(val: TdChatItemProps["animation"]): boolean;
        };
        avatar: {
            type: import("vue").PropType<TdChatItemProps["avatar"]>;
        };
        content: {
            type: import("vue").PropType<TdChatItemProps["content"]>;
        };
        datetime: {
            type: import("vue").PropType<TdChatItemProps["datetime"]>;
        };
        name: {
            type: import("vue").PropType<TdChatItemProps["name"]>;
        };
        reasoning: {
            type: import("vue").PropType<TdChatItemProps["reasoning"]>;
            default: TdChatItemProps["reasoning"];
        };
        role: {
            type: import("vue").PropType<TdChatItemProps["role"]>;
            validator(val: TdChatItemProps["role"]): boolean;
        };
        textLoading: BooleanConstructor;
        variant: {
            type: import("vue").PropType<TdChatItemProps["variant"]>;
            default: TdChatItemProps["variant"];
            validator(val: TdChatItemProps["variant"]): boolean;
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, {
        animation: "gradient" | "skeleton" | "moving";
        variant: "base" | "text" | "outline";
        reasoning: boolean | import("./type").TdChatReasoning;
        reasoningLoading: boolean;
        textLoading: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        reasoningLoading: {
            type: BooleanConstructor;
            default: boolean;
        };
        actions: {
            type: import("vue").PropType<TdChatItemProps["actions"]>;
        };
        animation: {
            type: import("vue").PropType<TdChatItemProps["animation"]>;
            default: TdChatItemProps["animation"];
            validator(val: TdChatItemProps["animation"]): boolean;
        };
        avatar: {
            type: import("vue").PropType<TdChatItemProps["avatar"]>;
        };
        content: {
            type: import("vue").PropType<TdChatItemProps["content"]>;
        };
        datetime: {
            type: import("vue").PropType<TdChatItemProps["datetime"]>;
        };
        name: {
            type: import("vue").PropType<TdChatItemProps["name"]>;
        };
        reasoning: {
            type: import("vue").PropType<TdChatItemProps["reasoning"]>;
            default: TdChatItemProps["reasoning"];
        };
        role: {
            type: import("vue").PropType<TdChatItemProps["role"]>;
            validator(val: TdChatItemProps["role"]): boolean;
        };
        textLoading: BooleanConstructor;
        variant: {
            type: import("vue").PropType<TdChatItemProps["variant"]>;
            default: TdChatItemProps["variant"];
            validator(val: TdChatItemProps["variant"]): boolean;
        };
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        animation: "gradient" | "skeleton" | "moving";
        variant: "base" | "text" | "outline";
        reasoning: boolean | import("./type").TdChatReasoning;
        reasoningLoading: boolean;
        textLoading: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    reasoningLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    actions: {
        type: import("vue").PropType<TdChatItemProps["actions"]>;
    };
    animation: {
        type: import("vue").PropType<TdChatItemProps["animation"]>;
        default: TdChatItemProps["animation"];
        validator(val: TdChatItemProps["animation"]): boolean;
    };
    avatar: {
        type: import("vue").PropType<TdChatItemProps["avatar"]>;
    };
    content: {
        type: import("vue").PropType<TdChatItemProps["content"]>;
    };
    datetime: {
        type: import("vue").PropType<TdChatItemProps["datetime"]>;
    };
    name: {
        type: import("vue").PropType<TdChatItemProps["name"]>;
    };
    reasoning: {
        type: import("vue").PropType<TdChatItemProps["reasoning"]>;
        default: TdChatItemProps["reasoning"];
    };
    role: {
        type: import("vue").PropType<TdChatItemProps["role"]>;
        validator(val: TdChatItemProps["role"]): boolean;
    };
    textLoading: BooleanConstructor;
    variant: {
        type: import("vue").PropType<TdChatItemProps["variant"]>;
        default: TdChatItemProps["variant"];
        validator(val: TdChatItemProps["variant"]): boolean;
    };
}>> & {
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], "operation", {
    animation: "gradient" | "skeleton" | "moving";
    variant: "base" | "text" | "outline";
    reasoning: boolean | import("./type").TdChatReasoning;
    reasoningLoading: boolean;
    textLoading: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ChatInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        autosize: {
            type: import("vue").PropType<TdChatInputProps["autosize"]>;
            default: TdChatInputProps["autosize"];
        };
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        stopDisabled: BooleanConstructor;
        suffixIcon: {
            type: import("vue").PropType<TdChatInputProps["suffixIcon"]>;
        };
        value: {
            type: import("vue").PropType<TdChatInputProps["value"]>;
            default: TdChatInputProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdChatInputProps["value"]>;
            default: TdChatInputProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdChatInputProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdChatInputProps["onBlur"]>;
        onChange: import("vue").PropType<TdChatInputProps["onChange"]>;
        onFocus: import("vue").PropType<TdChatInputProps["onFocus"]>;
        onSend: import("vue").PropType<TdChatInputProps["onSend"]>;
        onStop: import("vue").PropType<TdChatInputProps["onStop"]>;
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        onStop?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "blur" | "stop" | "update:modelValue" | "send")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        autosize: {
            type: import("vue").PropType<TdChatInputProps["autosize"]>;
            default: TdChatInputProps["autosize"];
        };
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        stopDisabled: BooleanConstructor;
        suffixIcon: {
            type: import("vue").PropType<TdChatInputProps["suffixIcon"]>;
        };
        value: {
            type: import("vue").PropType<TdChatInputProps["value"]>;
            default: TdChatInputProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdChatInputProps["value"]>;
            default: TdChatInputProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdChatInputProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdChatInputProps["onBlur"]>;
        onChange: import("vue").PropType<TdChatInputProps["onChange"]>;
        onFocus: import("vue").PropType<TdChatInputProps["onFocus"]>;
        onSend: import("vue").PropType<TdChatInputProps["onSend"]>;
        onStop: import("vue").PropType<TdChatInputProps["onStop"]>;
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        onStop?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, {
        disabled: boolean;
        value: string;
        placeholder: string;
        modelValue: string;
        autofocus: boolean;
        autosize: boolean | {
            minRows?: number;
            maxRows?: number;
        };
        stopDisabled: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        autofocus: BooleanConstructor;
        autosize: {
            type: import("vue").PropType<TdChatInputProps["autosize"]>;
            default: TdChatInputProps["autosize"];
        };
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        stopDisabled: BooleanConstructor;
        suffixIcon: {
            type: import("vue").PropType<TdChatInputProps["suffixIcon"]>;
        };
        value: {
            type: import("vue").PropType<TdChatInputProps["value"]>;
            default: TdChatInputProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdChatInputProps["value"]>;
            default: TdChatInputProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdChatInputProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdChatInputProps["onBlur"]>;
        onChange: import("vue").PropType<TdChatInputProps["onChange"]>;
        onFocus: import("vue").PropType<TdChatInputProps["onFocus"]>;
        onSend: import("vue").PropType<TdChatInputProps["onSend"]>;
        onStop: import("vue").PropType<TdChatInputProps["onStop"]>;
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        onStop?: (...args: any[]) => any;
        "onUpdate:modelValue"?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: string;
        placeholder: string;
        modelValue: string;
        autofocus: boolean;
        autosize: boolean | {
            minRows?: number;
            maxRows?: number;
        };
        stopDisabled: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    autofocus: BooleanConstructor;
    autosize: {
        type: import("vue").PropType<TdChatInputProps["autosize"]>;
        default: TdChatInputProps["autosize"];
    };
    disabled: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    stopDisabled: BooleanConstructor;
    suffixIcon: {
        type: import("vue").PropType<TdChatInputProps["suffixIcon"]>;
    };
    value: {
        type: import("vue").PropType<TdChatInputProps["value"]>;
        default: TdChatInputProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdChatInputProps["value"]>;
        default: TdChatInputProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdChatInputProps["defaultValue"]>;
    };
    onBlur: import("vue").PropType<TdChatInputProps["onBlur"]>;
    onChange: import("vue").PropType<TdChatInputProps["onChange"]>;
    onFocus: import("vue").PropType<TdChatInputProps["onFocus"]>;
    onSend: import("vue").PropType<TdChatInputProps["onSend"]>;
    onStop: import("vue").PropType<TdChatInputProps["onStop"]>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onSend?: (...args: any[]) => any;
    onStop?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "blur" | "stop" | "update:modelValue" | "send")[], "focus" | "blur" | "stop" | "update:modelValue" | "send", {
    disabled: boolean;
    value: string;
    placeholder: string;
    modelValue: string;
    autofocus: boolean;
    autosize: boolean | {
        minRows?: number;
        maxRows?: number;
    };
    stopDisabled: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ChatSender: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        prefix: {
            type: import("vue").PropType<TdChatSenderProps["prefix"]>;
        };
        stopDisabled: BooleanConstructor;
        suffix: {
            type: import("vue").PropType<TdChatSenderProps["suffix"]>;
        };
        textareaProps: {
            type: import("vue").PropType<TdChatSenderProps["textareaProps"]>;
        };
        value: {
            type: import("vue").PropType<TdChatSenderProps["value"]>;
            default: TdChatSenderProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdChatSenderProps["value"]>;
            default: TdChatSenderProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdChatSenderProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdChatSenderProps["onBlur"]>;
        onChange: import("vue").PropType<TdChatSenderProps["onChange"]>;
        onFocus: import("vue").PropType<TdChatSenderProps["onFocus"]>;
        onSend: import("vue").PropType<TdChatSenderProps["onSend"]>;
        onStop: import("vue").PropType<TdChatSenderProps["onStop"]>;
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        onStop?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "blur" | "stop" | "send")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        prefix: {
            type: import("vue").PropType<TdChatSenderProps["prefix"]>;
        };
        stopDisabled: BooleanConstructor;
        suffix: {
            type: import("vue").PropType<TdChatSenderProps["suffix"]>;
        };
        textareaProps: {
            type: import("vue").PropType<TdChatSenderProps["textareaProps"]>;
        };
        value: {
            type: import("vue").PropType<TdChatSenderProps["value"]>;
            default: TdChatSenderProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdChatSenderProps["value"]>;
            default: TdChatSenderProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdChatSenderProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdChatSenderProps["onBlur"]>;
        onChange: import("vue").PropType<TdChatSenderProps["onChange"]>;
        onFocus: import("vue").PropType<TdChatSenderProps["onFocus"]>;
        onSend: import("vue").PropType<TdChatSenderProps["onSend"]>;
        onStop: import("vue").PropType<TdChatSenderProps["onStop"]>;
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        onStop?: (...args: any[]) => any;
    }, {
        disabled: boolean;
        value: string;
        placeholder: string;
        modelValue: string;
        stopDisabled: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        disabled: BooleanConstructor;
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        prefix: {
            type: import("vue").PropType<TdChatSenderProps["prefix"]>;
        };
        stopDisabled: BooleanConstructor;
        suffix: {
            type: import("vue").PropType<TdChatSenderProps["suffix"]>;
        };
        textareaProps: {
            type: import("vue").PropType<TdChatSenderProps["textareaProps"]>;
        };
        value: {
            type: import("vue").PropType<TdChatSenderProps["value"]>;
            default: TdChatSenderProps["value"];
        };
        modelValue: {
            type: import("vue").PropType<TdChatSenderProps["value"]>;
            default: TdChatSenderProps["value"];
        };
        defaultValue: {
            type: import("vue").PropType<TdChatSenderProps["defaultValue"]>;
        };
        onBlur: import("vue").PropType<TdChatSenderProps["onBlur"]>;
        onChange: import("vue").PropType<TdChatSenderProps["onChange"]>;
        onFocus: import("vue").PropType<TdChatSenderProps["onFocus"]>;
        onSend: import("vue").PropType<TdChatSenderProps["onSend"]>;
        onStop: import("vue").PropType<TdChatSenderProps["onStop"]>;
    }>> & {
        onFocus?: (...args: any[]) => any;
        onBlur?: (...args: any[]) => any;
        onSend?: (...args: any[]) => any;
        onStop?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        value: string;
        placeholder: string;
        modelValue: string;
        stopDisabled: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    prefix: {
        type: import("vue").PropType<TdChatSenderProps["prefix"]>;
    };
    stopDisabled: BooleanConstructor;
    suffix: {
        type: import("vue").PropType<TdChatSenderProps["suffix"]>;
    };
    textareaProps: {
        type: import("vue").PropType<TdChatSenderProps["textareaProps"]>;
    };
    value: {
        type: import("vue").PropType<TdChatSenderProps["value"]>;
        default: TdChatSenderProps["value"];
    };
    modelValue: {
        type: import("vue").PropType<TdChatSenderProps["value"]>;
        default: TdChatSenderProps["value"];
    };
    defaultValue: {
        type: import("vue").PropType<TdChatSenderProps["defaultValue"]>;
    };
    onBlur: import("vue").PropType<TdChatSenderProps["onBlur"]>;
    onChange: import("vue").PropType<TdChatSenderProps["onChange"]>;
    onFocus: import("vue").PropType<TdChatSenderProps["onFocus"]>;
    onSend: import("vue").PropType<TdChatSenderProps["onSend"]>;
    onStop: import("vue").PropType<TdChatSenderProps["onStop"]>;
}>> & {
    onFocus?: (...args: any[]) => any;
    onBlur?: (...args: any[]) => any;
    onSend?: (...args: any[]) => any;
    onStop?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "blur" | "stop" | "send")[], "focus" | "blur" | "stop" | "send", {
    disabled: boolean;
    value: string;
    placeholder: string;
    modelValue: string;
    stopDisabled: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ChatContent: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: StringConstructor;
            default: string;
        };
        role: {
            type: import("vue").PropType<TdChatContentProps["role"]>;
            validator(val: TdChatContentProps["role"]): boolean;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: StringConstructor;
            default: string;
        };
        role: {
            type: import("vue").PropType<TdChatContentProps["role"]>;
            validator(val: TdChatContentProps["role"]): boolean;
        };
    }>>, {
        content: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: StringConstructor;
            default: string;
        };
        role: {
            type: import("vue").PropType<TdChatContentProps["role"]>;
            validator(val: TdChatContentProps["role"]): boolean;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        content: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: StringConstructor;
        default: string;
    };
    role: {
        type: import("vue").PropType<TdChatContentProps["role"]>;
        validator(val: TdChatContentProps["role"]): boolean;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    content: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ChatReasoning: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        collapsePanelProps: {
            type: import("vue").PropType<TdChatReasoningProps["collapsePanelProps"]>;
            default: () => TdChatReasoningProps["collapsePanelProps"];
        };
        expandIcon: {
            type: import("vue").PropType<TdChatReasoningProps["expandIcon"]>;
        };
        expandIconPlacement: {
            type: import("vue").PropType<TdChatReasoningProps["expandIconPlacement"]>;
            default: TdChatReasoningProps["expandIconPlacement"];
            validator(val: TdChatReasoningProps["expandIconPlacement"]): boolean;
        };
        header: {
            type: import("vue").PropType<TdChatReasoningProps["header"]>;
        };
        headerRightContent: {
            type: import("vue").PropType<TdChatReasoningProps["headerRightContent"]>;
        };
        onExpandChange: {
            type: import("vue").PropType<TdChatReasoningProps["onExpandChange"]>;
            default: () => void;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        collapsePanelProps: {
            type: import("vue").PropType<TdChatReasoningProps["collapsePanelProps"]>;
            default: () => TdChatReasoningProps["collapsePanelProps"];
        };
        expandIcon: {
            type: import("vue").PropType<TdChatReasoningProps["expandIcon"]>;
        };
        expandIconPlacement: {
            type: import("vue").PropType<TdChatReasoningProps["expandIconPlacement"]>;
            default: TdChatReasoningProps["expandIconPlacement"];
            validator(val: TdChatReasoningProps["expandIconPlacement"]): boolean;
        };
        header: {
            type: import("vue").PropType<TdChatReasoningProps["header"]>;
        };
        headerRightContent: {
            type: import("vue").PropType<TdChatReasoningProps["headerRightContent"]>;
        };
        onExpandChange: {
            type: import("vue").PropType<TdChatReasoningProps["onExpandChange"]>;
            default: () => void;
        };
    }>>, {
        onExpandChange: (value: import("..").CollapseValue) => void;
        expandIconPlacement: "left" | "right";
        collapsePanelProps: import("..").TdCollapsePanelProps;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        collapsePanelProps: {
            type: import("vue").PropType<TdChatReasoningProps["collapsePanelProps"]>;
            default: () => TdChatReasoningProps["collapsePanelProps"];
        };
        expandIcon: {
            type: import("vue").PropType<TdChatReasoningProps["expandIcon"]>;
        };
        expandIconPlacement: {
            type: import("vue").PropType<TdChatReasoningProps["expandIconPlacement"]>;
            default: TdChatReasoningProps["expandIconPlacement"];
            validator(val: TdChatReasoningProps["expandIconPlacement"]): boolean;
        };
        header: {
            type: import("vue").PropType<TdChatReasoningProps["header"]>;
        };
        headerRightContent: {
            type: import("vue").PropType<TdChatReasoningProps["headerRightContent"]>;
        };
        onExpandChange: {
            type: import("vue").PropType<TdChatReasoningProps["onExpandChange"]>;
            default: () => void;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        onExpandChange: (value: import("..").CollapseValue) => void;
        expandIconPlacement: "left" | "right";
        collapsePanelProps: import("..").TdCollapsePanelProps;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    collapsePanelProps: {
        type: import("vue").PropType<TdChatReasoningProps["collapsePanelProps"]>;
        default: () => TdChatReasoningProps["collapsePanelProps"];
    };
    expandIcon: {
        type: import("vue").PropType<TdChatReasoningProps["expandIcon"]>;
    };
    expandIconPlacement: {
        type: import("vue").PropType<TdChatReasoningProps["expandIconPlacement"]>;
        default: TdChatReasoningProps["expandIconPlacement"];
        validator(val: TdChatReasoningProps["expandIconPlacement"]): boolean;
    };
    header: {
        type: import("vue").PropType<TdChatReasoningProps["header"]>;
    };
    headerRightContent: {
        type: import("vue").PropType<TdChatReasoningProps["headerRightContent"]>;
    };
    onExpandChange: {
        type: import("vue").PropType<TdChatReasoningProps["onExpandChange"]>;
        default: () => void;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    onExpandChange: (value: import("..").CollapseValue) => void;
    expandIconPlacement: "left" | "right";
    collapsePanelProps: import("..").TdCollapsePanelProps;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ChatAction: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: StringConstructor;
            default: string;
        };
        disabled: BooleanConstructor;
        isBad: BooleanConstructor;
        isGood: BooleanConstructor;
        operationBtn: {
            type: import("vue").PropType<TdChatActionProps["operationBtn"]>;
            default: () => TdChatActionProps["operationBtn"];
        };
        onOperation: import("vue").PropType<TdChatActionProps["onOperation"]>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: StringConstructor;
            default: string;
        };
        disabled: BooleanConstructor;
        isBad: BooleanConstructor;
        isGood: BooleanConstructor;
        operationBtn: {
            type: import("vue").PropType<TdChatActionProps["operationBtn"]>;
            default: () => TdChatActionProps["operationBtn"];
        };
        onOperation: import("vue").PropType<TdChatActionProps["onOperation"]>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, {
        disabled: boolean;
        content: string;
        operationBtn: ("copy" | "replay" | "good" | "bad")[];
        isBad: boolean;
        isGood: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        content: {
            type: StringConstructor;
            default: string;
        };
        disabled: BooleanConstructor;
        isBad: BooleanConstructor;
        isGood: BooleanConstructor;
        operationBtn: {
            type: import("vue").PropType<TdChatActionProps["operationBtn"]>;
            default: () => TdChatActionProps["operationBtn"];
        };
        onOperation: import("vue").PropType<TdChatActionProps["onOperation"]>;
    }>> & {
        onOperation?: (...args: any[]) => any;
    }, () => JSX.Element, {}, {}, {}, {
        disabled: boolean;
        content: string;
        operationBtn: ("copy" | "replay" | "good" | "bad")[];
        isBad: boolean;
        isGood: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: StringConstructor;
        default: string;
    };
    disabled: BooleanConstructor;
    isBad: BooleanConstructor;
    isGood: BooleanConstructor;
    operationBtn: {
        type: import("vue").PropType<TdChatActionProps["operationBtn"]>;
        default: () => TdChatActionProps["operationBtn"];
    };
    onOperation: import("vue").PropType<TdChatActionProps["onOperation"]>;
}>> & {
    onOperation?: (...args: any[]) => any;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "operation"[], "operation", {
    disabled: boolean;
    content: string;
    operationBtn: ("copy" | "replay" | "good" | "bad")[];
    isBad: boolean;
    isGood: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export declare const ChatLoading: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<TdChatLoadingProps["animation"]>;
            default: TdChatLoadingProps["animation"];
            validator(val: TdChatLoadingProps["animation"]): boolean;
        };
        text: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<TdChatLoadingProps["animation"]>;
            default: TdChatLoadingProps["animation"];
            validator(val: TdChatLoadingProps["animation"]): boolean;
        };
        text: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        text: string;
        animation: "gradient" | "moving";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: import("vue").PropType<TdChatLoadingProps["animation"]>;
            default: TdChatLoadingProps["animation"];
            validator(val: TdChatLoadingProps["animation"]): boolean;
        };
        text: {
            type: StringConstructor;
            default: string;
        };
    }>>, () => JSX.Element, {}, {}, {}, {
        text: string;
        animation: "gradient" | "moving";
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<TdChatLoadingProps["animation"]>;
        default: TdChatLoadingProps["animation"];
        validator(val: TdChatLoadingProps["animation"]): boolean;
    };
    text: {
        type: StringConstructor;
        default: string;
    };
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    text: string;
    animation: "gradient" | "moving";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin;
export default Chat;
