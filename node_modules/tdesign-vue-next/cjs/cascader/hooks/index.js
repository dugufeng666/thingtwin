/**
 * tdesign v1.12.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var treeStore = require('../../_chunks/dep-1f198126.js');
var hooks_useDisabled = require('../../hooks/useDisabled.js');
var hooks_useVModel = require('../../hooks/useVModel.js');
var hooks_useDefaultValue = require('../../hooks/useDefaultValue.js');
require('@babel/runtime/helpers/toConsumableArray');
var cascader_utils_effect = require('../utils/effect.js');
var cascader_utils_helper = require('../utils/helper.js');
var isFunction = require('../../_chunks/dep-4bb500b8.js');
var isString = require('../../_chunks/dep-12a3fd02.js');
var isEqual = require('../../_chunks/dep-9ab88918.js');
require('@babel/runtime/helpers/classCallCheck');
require('@babel/runtime/helpers/createClass');
require('mitt');
require('../../_chunks/dep-c8cb8246.js');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('../../_chunks/dep-7bb1a236.js');
require('../../_chunks/dep-1e4a8214.js');
require('../../_chunks/dep-fa2fda14.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-5247a460.js');
require('../../_chunks/dep-b381bc1a.js');
require('../../_chunks/dep-6441bda0.js');
require('../../_chunks/dep-a76126df.js');
require('../../_chunks/dep-54b7116c.js');
require('../../_chunks/dep-2debdee8.js');
require('../../_chunks/dep-99110617.js');
require('../../_chunks/dep-5e2171e6.js');
require('../../_chunks/dep-ce3eb768.js');
require('../../_chunks/dep-4479843a.js');
require('../../_chunks/dep-0e58cbbd.js');
require('../../_chunks/dep-00f18931.js');
require('../../_chunks/dep-84a0e81d.js');
require('../../_chunks/dep-564b3613.js');
require('../../_chunks/dep-11fc6f95.js');
require('../../_chunks/dep-c3bc048f.js');
require('../../_chunks/dep-58abd685.js');
require('../../_chunks/dep-3a0b641f.js');
require('../../_chunks/dep-1c142d75.js');
require('../../_chunks/dep-c1b17346.js');
require('../../_chunks/dep-94fa6b5d.js');
require('../../_chunks/dep-f0a744e5.js');
require('../../_chunks/dep-89cb0bb6.js');
require('../../_chunks/dep-e2633705.js');
require('../../_chunks/dep-d0783150.js');
require('../../_chunks/dep-dee45c79.js');
require('../../_chunks/dep-41ef4b47.js');
require('../../_chunks/dep-10d5d599.js');
require('../../_chunks/dep-13bdf55b.js');
require('../../_chunks/dep-6bdaf809.js');
require('../../_chunks/dep-272b1445.js');
require('../../_chunks/dep-19f6d038.js');
require('../../_chunks/dep-cee3e714.js');
require('../../_chunks/dep-cd97ae94.js');
require('../../_chunks/dep-425a3c77.js');
require('../../_chunks/dep-6d957e14.js');
require('../../_chunks/dep-e6692a32.js');
require('../../_chunks/dep-3a1cfa95.js');
require('../../_chunks/dep-36b83f83.js');
require('../../_chunks/dep-0b6e5f33.js');
require('../../_chunks/dep-3c0d3dc9.js');
require('../../_chunks/dep-fcea8340.js');
require('../../_chunks/dep-5472dcbf.js');
require('../../_chunks/dep-449af6ce.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useContext = function useContext(props, setInnerValue, innerPopupVisible, setPopupVisible) {
  var statusContext = Vue.reactive({
    treeStore: null,
    inputVal: null,
    scopeVal: void 0,
    treeNodes: [],
    expend: []
  });
  return {
    statusContext: statusContext,
    cascaderContext: Vue.computed(function () {
      var size = props.size,
        checkStrictly = props.checkStrictly,
        lazy = props.lazy,
        multiple = props.multiple,
        filterable = props.filterable,
        clearable = props.clearable,
        checkProps = props.checkProps,
        max = props.max,
        disabled = props.disabled,
        showAllLevels = props.showAllLevels,
        minCollapsedNum = props.minCollapsedNum,
        valueType = props.valueType,
        modelValue = props.modelValue;
      return _objectSpread(_objectSpread({
        value: statusContext.scopeVal,
        size: size,
        checkStrictly: checkStrictly,
        lazy: lazy,
        multiple: multiple,
        filterable: filterable,
        clearable: clearable,
        checkProps: checkProps,
        max: max,
        disabled: disabled,
        showAllLevels: showAllLevels,
        minCollapsedNum: minCollapsedNum,
        valueType: valueType,
        visible: innerPopupVisible.value
      }, statusContext), {}, {
        setTreeNodes: function setTreeNodes(nodes) {
          statusContext.treeNodes = nodes;
        },
        setValue: function setValue(val, source, node) {
          if (isEqual.isEqual(val, modelValue)) return;
          setInnerValue(val, {
            source: source,
            node: node
          });
        },
        setVisible: setPopupVisible,
        setInputVal: function setInputVal(val) {
          statusContext.inputVal = val;
        },
        setExpend: function setExpend(val) {
          statusContext.expend = val;
        }
      });
    })
  };
};
var useCascaderContext = function useCascaderContext(props) {
  var disabled = hooks_useDisabled.useDisabled();
  var _toRefs = Vue.toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue,
    popupVisible = _toRefs.popupVisible;
  var _useVModel = hooks_useVModel["default"](value, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
    innerValue = _useVModel2[0],
    setInnerValue = _useVModel2[1];
  var _useDefaultValue = hooks_useDefaultValue["default"](popupVisible, false, props.onPopupVisibleChange, "popupVisible"),
    _useDefaultValue2 = _slicedToArray__default["default"](_useDefaultValue, 2),
    innerPopupVisible = _useDefaultValue2[0],
    setPopupVisible = _useDefaultValue2[1];
  var _useContext = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible),
    cascaderContext = _useContext.cascaderContext,
    statusContext = _useContext.statusContext;
  var isFilterable = Vue.computed(function () {
    return Boolean(props.filterable || isFunction.isFunction(props.filter));
  });
  var updatedTreeNodes = function updatedTreeNodes() {
    var _cascaderContext$valu = cascaderContext.value,
      inputVal = _cascaderContext$valu.inputVal,
      treeStore = _cascaderContext$valu.treeStore,
      setTreeNodes = _cascaderContext$valu.setTreeNodes;
    cascader_utils_effect.treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
  };
  var updateExpend = function updateExpend() {
    var _cascaderContext$valu2 = cascaderContext.value,
      value2 = _cascaderContext$valu2.value,
      treeStore = _cascaderContext$valu2.treeStore;
    var expend = statusContext.expend;
    cascader_utils_effect.treeStoreExpendEffect(treeStore, value2, expend);
    treeStore.replaceChecked(cascader_utils_helper.getTreeValue(value2));
  };
  Vue.watch(function () {
    return props.options;
  }, function () {
    var options = props.options,
      _props$keys = props.keys,
      keys = _props$keys === void 0 ? {} : _props$keys,
      checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    var treeStore$1 = statusContext.treeStore;
    if (!options.length && !treeStore$1) return;
    if (!treeStore$1) {
      var store = new treeStore.TreeStore({
        keys: _objectSpread(_objectSpread({}, keys), {}, {
          children: isString.isString(keys.children) ? keys.children : "children"
        }),
        checkable: true,
        expandMutex: true,
        expandParent: true,
        lazy: lazy,
        load: load,
        valueMode: valueMode,
        checkStrictly: checkStrictly,
        onLoad: function onLoad() {
          Vue.nextTick(function () {
            store.refreshNodes();
            updatedTreeNodes();
          });
        }
      });
      store.append(options);
      statusContext.treeStore = store;
    } else {
      treeStore$1.reload(options);
      treeStore$1.refreshNodes();
    }
    updateExpend();
    updatedTreeNodes();
  }, {
    immediate: true,
    deep: true
  });
  Vue.watch(function () {
    var checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    return JSON.stringify({
      valueMode: valueMode,
      checkStrictly: checkStrictly,
      lazy: lazy,
      load: load
    });
  }, function () {
    var treeStore = statusContext.treeStore;
    if (!treeStore) return;
    var checkStrictly = props.checkStrictly,
      lazy = props.lazy,
      load = props.load,
      valueMode = props.valueMode;
    var treeProps = {
      checkStrictly: checkStrictly,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    };
    treeStore.setConfig(treeProps);
  }, {
    immediate: true
  });
  Vue.watch(innerValue, function () {
    var _cascaderContext$valu3 = cascaderContext.value,
      setValue = _cascaderContext$valu3.setValue,
      multiple = _cascaderContext$valu3.multiple,
      valueType = _cascaderContext$valu3.valueType;
    if (cascader_utils_helper.isValueInvalid(innerValue.value, cascaderContext.value)) {
      setValue(multiple ? [] : "", "invalid-value");
    } else {
      statusContext.scopeVal = multiple ? [] : "";
    }
    if (!cascader_utils_helper.isEmptyValues(innerValue)) {
      statusContext.scopeVal = cascader_utils_helper.getCascaderValue(innerValue.value, valueType, multiple);
    }
    if (!statusContext.treeStore) return;
    updateExpend();
    updatedTreeNodes();
  }, {
    immediate: true
  });
  Vue.watch(function () {
    return innerPopupVisible.value && isFilterable.value;
  }, function (visible) {
    var setInputVal = cascaderContext.value.setInputVal;
    if (visible) {
      setInputVal("");
    }
  });
  Vue.watch(function () {
    return statusContext.inputVal;
  }, function () {
    updatedTreeNodes();
  });
  var getCascaderItems = function getCascaderItems(arrValue) {
    var options = [];
    arrValue.forEach(function (value2) {
      var _statusContext$treeSt;
      var nodes = (_statusContext$treeSt = statusContext.treeStore) === null || _statusContext$treeSt === void 0 ? void 0 : _statusContext$treeSt.getNodes(value2);
      nodes && nodes[0] && options.push(nodes[0].data);
    });
    return options;
  };
  return {
    cascaderContext: cascaderContext,
    isFilterable: isFilterable,
    innerValue: innerValue,
    getCascaderItems: getCascaderItems
  };
};

exports.useCascaderContext = useCascaderContext;
exports.useContext = useContext;
//# sourceMappingURL=index.js.map
