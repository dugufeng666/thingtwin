import "./chunk-BKDDKEDW.js";

// node_modules/@meta2d/fta-diagram/src/andGate.js
function andGate(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 6;
  const myw = width / 4;
  path.moveTo(x + myw * 2, y + 0);
  path.lineTo(x + myw * 2, y + myh);
  path.moveTo(x, y + myh + myw * 2);
  path.arc(x + myw * 2, y + myh + myw * 2, myw * 2, Math.PI * 1, Math.PI * 2, false);
  path.lineTo(x + myw * 4, y + myh * 5);
  path.lineTo(x, y + myh * 5);
  path.lineTo(x, y + myh + myw * 2);
  path.moveTo(x + myw, y + myh * 5);
  path.lineTo(x + myw, y + myh * 6);
  path.moveTo(x + myw * 2, y + myh * 5);
  path.lineTo(x + myw * 2, y + myh * 6);
  path.moveTo(x + myw * 3, y + myh * 5);
  path.lineTo(x + myw * 3, y + myh * 6);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function andGateAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 0.25,
      y: 1
    },
    {
      x: 0.5,
      y: 1
    },
    {
      x: 0.75,
      y: 1
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/fta-diagram/src/basicEvent.js
function basicEvent(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const vlineL = height - width;
  const radius = 0.5 * width;
  path.moveTo(x + width / 2, y);
  path.lineTo(x + width / 2, y + vlineL);
  path.moveTo(x + width, y + radius + vlineL);
  path.arc(x + width / 2, y + radius + vlineL, radius, 0, Math.PI * 2, false);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function basicEventAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 0.5,
      y: 1
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/fta-diagram/src/conditionalEvent.js
function conditionalEvent(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 2;
  const myw = width / 5;
  path.moveTo(x, y + myh);
  path.lineTo(x + myw, y + myh);
  path.moveTo(x + myw * 5, y + myh);
  path.ellipse(x + myw * 3, y + myh, 2 * myw, myh, 0, 0, Math.PI * 2);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function conditionalEventAnchors(pen) {
  const points = [
    {
      x: 0.6,
      y: 0
    },
    { x: 1, y: 0.5 },
    { x: 0.6, y: 1 },
    { x: 0, y: 0.5 }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/fta-diagram/src/event.js
function event(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 4;
  const myw = 0.5 * width;
  path.moveTo(x + myw, y);
  path.lineTo(x + myw, y + myh);
  path.moveTo(x, y + myh);
  path.rect(x, y + myh, myw * 2, myh * 2);
  path.moveTo(x + myw, y + 3 * myh);
  path.lineTo(x + myw, y + 4 * myh);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/fta-diagram/src/forbiddenGate.js
function forbiddenGate(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 8;
  const myw = 0.25 * width;
  path.moveTo(x + myw * 2, y);
  path.lineTo(x + myw * 2, y + myh * 2);
  path.lineTo(x + myw * 3, y + myh * 3);
  path.lineTo(x + myw * 3, y + myh * 5);
  path.lineTo(x + myw * 2, y + myh * 6);
  path.lineTo(x + myw * 1, y + myh * 5);
  path.lineTo(x + myw * 1, y + myh * 3);
  path.lineTo(x + myw * 2, y + myh * 2);
  path.moveTo(x + myw * 3, y + myh * 4);
  path.lineTo(x + myw * 4, y + myh * 4);
  path.moveTo(x + myw * 2, y + myh * 6);
  path.lineTo(x + myw * 2, y + myh * 8);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function forbiddenGateAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 1,
      y: 0.5
    },
    {
      x: 0.5,
      y: 1
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/fta-diagram/src/orGate.js
function orGate(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myw = width / 2;
  const myh = height / 10;
  path.moveTo(x + myw, y);
  path.lineTo(x + myw, y + myh);
  path.moveTo(x + myw, y + myh);
  path.quadraticCurveTo(x + myw * 2, y + myh, x + myw * 2, y + myh * 9);
  path.moveTo(x + myw, y + myh);
  path.quadraticCurveTo(x, y + myh, x, y + myh * 9);
  path.quadraticCurveTo(x + myw, y + myh * 6, x + myw * 2, y + myh * 9);
  path.moveTo(x + myw, y + height * 3 / 4);
  path.lineTo(x + myw, y + height);
  path.moveTo(x + myw * 2 / 5, y + height * 201 / 250);
  path.lineTo(x + myw * 2 / 5, y + height);
  path.moveTo(x + myw * 8 / 5, y + height * 201 / 250);
  path.lineTo(x + myw * 8 / 5, y + height);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function orGateAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 0.2,
      y: 1
    },
    {
      x: 0.5,
      y: 1
    },
    {
      x: 0.8,
      y: 1
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/fta-diagram/src/priorityAndGate.js
function priorityAndGate(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 6;
  const myw = width / 4;
  path.moveTo(x + myw * 2, y + 0);
  path.lineTo(x + myw * 2, y + myh);
  path.moveTo(x, y + myh + myw * 2);
  path.arc(x + myw * 2, y + myh + myw * 2, myw * 2, Math.PI * 1, Math.PI * 2, false);
  path.lineTo(x + myw * 4, y + myh * 5);
  path.lineTo(x, y + myh * 5);
  path.lineTo(x, y + myh + myw * 2);
  path.moveTo(x, y + myh * 5 - myh / 3);
  path.lineTo(x + myw * 4, y + myh * 5 - myh / 3);
  path.moveTo(x + myw, y + myh * 5);
  path.lineTo(x + myw, y + myh * 6);
  path.moveTo(x + myw * 2, y + myh * 5);
  path.lineTo(x + myw * 2, y + myh * 6);
  path.moveTo(x + myw * 3, y + myh * 5);
  path.lineTo(x + myw * 3, y + myh * 6);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/fta-diagram/src/switchEvent.js
function switchEvent(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 4;
  const myw = 0.5 * width;
  path.moveTo(x + myw, y);
  path.lineTo(x + myw, y + myh);
  path.lineTo(x + myw * 2, y + myh * 2);
  path.lineTo(x + myw * 2, y + myh * 4);
  path.lineTo(x, y + myh * 4);
  path.lineTo(x, y + myh * 2);
  path.lineTo(x + myw, y + myh);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/fta-diagram/src/transferSymbol.js
function transferSymbol(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 4;
  const myw = width / 2;
  path.moveTo(x + myw, y);
  path.lineTo(x + myw, y + myh);
  path.lineTo(x + myw * 2, y + myh * 4);
  path.lineTo(x, y + myh * 4);
  path.lineTo(x + myw, y + myh);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}

// node_modules/@meta2d/fta-diagram/src/unexpandedEvent.js
function unexpandedEvent(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  const myh = height / 3;
  const myw = 0.5 * width;
  path.moveTo(x + myw, y);
  path.lineTo(x + myw, y + myh);
  path.lineTo(x + width, y + 2 * myh);
  path.lineTo(x + myw, y + height);
  path.lineTo(x, y + 2 * myh);
  path.lineTo(x + myw, y + myh);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function unexpandedEventAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 1,
      y: 2 / 3
    },
    {
      x: 0.5,
      y: 1
    },
    {
      x: 0,
      y: 2 / 3
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/fta-diagram/src/xorGate.js
function xorGate(pen, ctx) {
  const path = !ctx ? new Path2D() : ctx;
  const { x, y, width, height } = pen.calculative.worldRect;
  let myw = width / 2;
  let myh = height / 10;
  path.moveTo(x + myw, y);
  path.lineTo(x + myw, y + myh);
  path.moveTo(x + myw, y + myh);
  path.quadraticCurveTo(x + myw * 2, y + myh, x + myw * 2, y + myh * 9);
  path.moveTo(x + myw, y + myh);
  path.quadraticCurveTo(x, y + myh, x, y + myh * 9);
  path.quadraticCurveTo(x + myw, y + myh * 6, x + myw * 2, y + myh * 9);
  path.moveTo(x, y + myh * 10);
  path.quadraticCurveTo(x + myw, y + myh * 7, x + myw * 2, y + myh * 10);
  path.moveTo(x + myw * 2 / 5, y + height * 201 / 250 + myh);
  path.lineTo(x + myw * 2 / 5, y + height);
  path.moveTo(x + myw * 8 / 5, y + height * 201 / 250 + myh);
  path.lineTo(x + myw * 8 / 5, y + height);
  path.closePath();
  if (path instanceof Path2D)
    return path;
}
function xorGateAnchors(pen) {
  const points = [
    {
      x: 0.5,
      y: 0
    },
    {
      x: 1 / 5,
      y: 1
    },
    {
      x: 4 / 5,
      y: 1
    }
  ];
  pen.anchors = points.map(({ x, y }, index) => {
    return {
      id: `${index}`,
      penId: pen.id,
      x,
      y
    };
  });
}

// node_modules/@meta2d/fta-diagram/src/votingGate.js
function votingGate(ctx, pen) {
  const { x, y, width, height } = pen.calculative.worldRect;
  const myw = width / 2;
  const myh = height / 10;
  ctx.beginPath();
  ctx.moveTo(x + myw, y);
  ctx.lineTo(x + myw, y + myh);
  ctx.moveTo(x + myw, y + myh);
  ctx.quadraticCurveTo(x + myw * 2, y + myh, x + myw * 2, y + myh * 9);
  ctx.moveTo(x + myw, y + myh);
  ctx.quadraticCurveTo(x, y + myh, x, y + myh * 9);
  ctx.quadraticCurveTo(x + myw, y + myh * 6, x + myw * 2, y + myh * 9);
  ctx.moveTo(x + myw, y + height * 3 / 4);
  ctx.lineTo(x + myw, y + height * 9 / 10);
  ctx.moveTo(x + myw * 2 / 5, y + height * 201 / 250);
  ctx.lineTo(x + myw * 2 / 5, y + height * 9 / 10);
  ctx.moveTo(x + myw * 8 / 5, y + height * 201 / 250);
  ctx.lineTo(x + myw * 8 / 5, y + height * 9 / 10);
  ctx.stroke();
  ctx.closePath();
  ctx.beginPath();
  const fontSize = myw * 2 > myh * 10 ? myh : myw / 5;
  ctx.fillStyle = "#333333";
  ctx.font = fontSize + "px Arial";
  ctx.textBaseline = "bottom";
  ctx.textAlign = "center";
  ctx.fillText("o", x + myw, y + height);
  ctx.fillText("m", x + myw * 2 / 5, y + height);
  ctx.fillText("o", x + myw * 8 / 5, y + height);
  ctx.closePath();
}

// node_modules/@meta2d/fta-diagram/src/register.js
function ftaPens() {
  return {
    andGate,
    basicEvent,
    conditionalEvent,
    event,
    forbiddenGate,
    orGate,
    priorityAndGate,
    switchEvent,
    transferSymbol,
    unexpandedEvent,
    xorGate
  };
}
function ftaPensbyCtx() {
  return {
    votingGate
  };
}
function ftaAnchors() {
  return {
    andGate: andGateAnchors,
    orGate: orGateAnchors,
    priorityAndGate: andGateAnchors,
    votingGate: orGateAnchors,
    xorGate: xorGateAnchors,
    forbiddenGate: forbiddenGateAnchors,
    basicEvent: basicEventAnchors,
    unexpandedEvent: unexpandedEventAnchors,
    conditionalEvent: conditionalEventAnchors,
    transferSymbol: basicEventAnchors
  };
}
export {
  andGate,
  andGateAnchors,
  basicEvent,
  basicEventAnchors,
  conditionalEvent,
  conditionalEventAnchors,
  event,
  forbiddenGate,
  forbiddenGateAnchors,
  ftaAnchors,
  ftaPens,
  ftaPensbyCtx,
  orGate,
  orGateAnchors,
  priorityAndGate,
  switchEvent,
  transferSymbol,
  unexpandedEvent,
  unexpandedEventAnchors,
  votingGate,
  xorGate,
  xorGateAnchors
};
//# sourceMappingURL=@meta2d_fta-diagram.js.map
