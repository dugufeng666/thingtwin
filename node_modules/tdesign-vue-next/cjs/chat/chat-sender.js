/**
 * tdesign v1.13.0
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var Vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var hooks_useConfig = require('../hooks/useConfig.js');
var chat_chatSenderProps = require('./chat-sender-props.js');
var button_index = require('../button/index.js');
var textarea_index = require('../textarea/index.js');
var tooltip_index = require('../tooltip/index.js');
var hooks_useVModel = require('../hooks/useVModel.js');
var hooks_tnode = require('../_chunks/dep-8fa35315.js');
var configProvider_hooks_useConfig = require('../config-provider/hooks/useConfig.js');
require('../_chunks/dep-47100b3a.js');
require('../_chunks/dep-687d9447.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-84fc4531.js');
require('dayjs');
require('../_chunks/dep-22d9d967.js');
require('../_chunks/dep-98fbf983.js');
require('../_chunks/dep-5590274c.js');
require('../_chunks/dep-104f7ee1.js');
require('../_chunks/dep-c94b540e.js');
require('../_chunks/dep-39c9581c.js');
require('../_chunks/dep-f022423f.js');
require('../_chunks/dep-a929bdb8.js');
require('../_chunks/dep-00397a41.js');
require('../_chunks/dep-3b62827f.js');
require('../_chunks/dep-d7a38fb3.js');
require('../_chunks/dep-92c5e4a5.js');
require('../_chunks/dep-78a63892.js');
require('../_chunks/dep-5d64466b.js');
require('../_chunks/dep-689071d2.js');
require('../_chunks/dep-edc40e94.js');
require('../_chunks/dep-2ce2286c.js');
require('../_chunks/dep-bb55dbeb.js');
require('../_chunks/dep-e5e0508f.js');
require('../_chunks/dep-8a241271.js');
require('../_chunks/dep-c7e11941.js');
require('../_chunks/dep-7279283f.js');
require('../_chunks/dep-08fa391e.js');
require('../_chunks/dep-565984b5.js');
require('../_chunks/dep-e7786719.js');
require('../_chunks/dep-2963fcd8.js');
require('../_chunks/dep-96341f20.js');
require('../button/button.js');
require('@babel/runtime/helpers/toConsumableArray');
require('../loading/index.js');
require('../_chunks/dep-6f7850dd.js');
require('../loading/plugin.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_chunks/dep-00dea1d2.js');
require('../_chunks/dep-ec4a2dad.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../_chunks/dep-ceab8f85.js');
require('../_chunks/dep-a8fcbdcc.js');
require('../_chunks/dep-ec389751.js');
require('../utils/dom.js');
require('../hooks/useTeleport.js');
require('../loading/props.js');
require('../utils/render-tnode.js');
require('../_chunks/dep-9f078572.js');
require('../_chunks/dep-7fc1ffe2.js');
require('../_chunks/dep-b1f64980.js');
require('../_chunks/dep-29224a9c.js');
require('../_chunks/dep-5ae95903.js');
require('../_chunks/dep-8675a24d.js');
require('../_chunks/dep-25e6caa1.js');
require('../_chunks/dep-53ee0c65.js');
require('../_chunks/dep-01fce6ff.js');
require('../_chunks/dep-2766940c.js');
require('../_chunks/dep-c6b053f2.js');
require('../_chunks/dep-3d3d9813.js');
require('../_chunks/dep-69e83dde.js');
require('../_chunks/dep-290797fe.js');
require('../_chunks/dep-f92d0863.js');
require('../utils/withInstall.js');
require('../button/props.js');
require('../hooks/useRipple.js');
require('../hooks/useKeepAnimation.js');
require('../hooks/useDisabled.js');
require('../_chunks/dep-b12afab7.js');
require('../textarea/textarea.js');
require('../form/consts/index.js');
require('../hooks/useReadonly.js');
require('../input/hooks/useLengthLimit.js');
require('../_chunks/dep-94e74ea7.js');
require('../textarea/props.js');
require('../_chunks/dep-9ca23be8.js');
require('../_chunks/dep-b658bf06.js');
require('../_chunks/dep-b84a0534.js');
require('../tooltip/tooltip.js');
require('../tooltip/props.js');
require('../popup/props.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@popperjs/core');
require('../popup/container.js');
require('../hooks/useResizeObserver.js');
require('../_chunks/dep-55d4f411.js');
require('../_chunks/dep-fb7bcbec.js');
require('../tooltip/utils/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _ChatSender = Vue.defineComponent({
  name: "TChatSender",
  props: chat_chatSenderProps["default"],
  emits: ["send", "stop", "update:modelValue", "blur", "focus", "fileSelect"],
  setup: function setup(props2, _ref) {
    var emit = _ref.emit;
    var shiftDownFlag = false;
    var isComposition = false;
    var senderTextarea = Vue.ref(null);
    var COMPONENT_NAME = hooks_useConfig.usePrefixClass("chat");
    var _useConfig = configProvider_hooks_useConfig.useConfig("chat"),
      globalConfig = _useConfig.globalConfig;
    var _globalConfig$value = globalConfig.value,
      uploadImageText = _globalConfig$value.uploadImageText,
      uploadAttachmentText = _globalConfig$value.uploadAttachmentText;
    var _toRefs = Vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = hooks_useVModel["default"](value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      textValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var focusFlag = Vue.ref(false);
    var loading = Vue.ref(false);
    var showStopBtn = Vue.computed(function () {
      return props2.stopDisabled && loading.value;
    });
    var disabled = Vue.computed(function () {
      return props2.disabled || false;
    });
    var uploadImageRef = Vue.ref(null);
    var uploadFileRef = Vue.ref(null);
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var sendClick = function sendClick(e) {
      if (textValue.value && !disabled.value) {
        emit("send", textValue.value, {
          e: e
        });
        loading.value = true;
        textValue.value = "";
      }
    };
    var handleStop = function handleStop(e) {
      loading.value = false;
      emit("stop", textValue.value, {
        e: e
      });
    };
    var keydownFn = function keydownFn(value2, context) {
      var key = context.e.key;
      if (key === "Shift") {
        shiftDownFlag = true;
      }
      if (key === "Enter" && !shiftDownFlag && !isComposition) {
        context.e.cancelBubble = true;
        context.e.preventDefault();
        context.e.stopPropagation();
        sendClick(context.e);
      }
    };
    var focusFn = function focusFn(value2, context) {
      focusFlag.value = true;
      emit("focus", value2, context);
    };
    var blurFn = function blurFn(value2, context) {
      focusFlag.value = false;
      emit("blur", value2, context);
    };
    var keyupFn = function keyupFn(value2, context) {
      var key = context.e.key;
      if (key === "Shift") {
        shiftDownFlag = false;
      }
    };
    var textChange = function textChange(value2, context) {
      setInnerValue(value2, context);
    };
    var compositionstartFn = function compositionstartFn() {
      isComposition = true;
    };
    var compositionendFn = function compositionendFn() {
      isComposition = false;
    };
    var actionsDefault = Vue.reactive([{
      name: "uploadImage",
      uploadProps: {
        multiple: true,
        accept: "image/*"
      },
      action: function action(_ref2) {
        var files = _ref2.files,
          name = _ref2.name;
        emit("fileSelect", {
          files: files,
          name: name
        });
      }
    }, {
      name: "uploadAttachment",
      action: function action(_ref3) {
        var files = _ref3.files,
          name = _ref3.name;
        emit("fileSelect", {
          files: files,
          name: name
        });
      }
    }]);
    var getDefaultSuffixIcon = function getDefaultSuffixIcon() {
      var actions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : actionsDefault;
      var getDefaultAction = function getDefaultAction(name) {
        var _actionsDefault$find;
        var defaultAction = (_actionsDefault$find = actionsDefault.find(function (item) {
          return item.name === name;
        })) === null || _actionsDefault$find === void 0 ? void 0 : _actionsDefault$find.action;
        return defaultAction || function (_ref4) {
          var files = _ref4.files,
            name2 = _ref4.name;
          return emit("fileSelect", {
            files: files,
            name: name2
          });
        };
      };
      var uploadAttachment = actions.find(function (item) {
        return item.name === "uploadAttachment";
      });
      var uploadAttachmentButton = uploadAttachment ? Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("input", Vue.mergeProps(uploadAttachment.uploadProps, {
        "ref": uploadFileRef,
        "type": "file",
        "onChange": function onChange(e) {
          var files = Array.from(e.target.files || []);
          if (!files.length) {
            return;
          }
          var action = uploadAttachment.action || getDefaultAction("uploadAttachment");
          action({
            files: files,
            name: uploadAttachment.name
          });
          e.target.value = "";
        },
        "hidden": true
      }), null), Vue.createVNode(tooltip_index.Tooltip, {
        "content": uploadAttachmentText
      }, {
        "default": function _default() {
          return [Vue.createVNode(button_index.Button, {
            "theme": "default",
            "onClick": function onClick() {
              var _uploadFileRef$value;
              return (_uploadFileRef$value = uploadFileRef.value) === null || _uploadFileRef$value === void 0 ? void 0 : _uploadFileRef$value.click();
            },
            "shape": "circle",
            "variant": "text",
            "class": ["".concat(COMPONENT_NAME.value, "-sender__upload")]
          }, {
            "default": function _default() {
              return [Vue.createVNode(tdesignIconsVueNext.FileAttachmentIcon, null, null)];
            }
          })];
        }
      })]) : null;
      var uploadImage = actions.find(function (item) {
        return item.name === "uploadImage";
      });
      var renderUploadImageButton = uploadImage ? Vue.createVNode(Vue.Fragment, null, [Vue.createVNode("input", Vue.mergeProps(uploadImage.uploadProps, {
        "ref": uploadImageRef,
        "type": "file",
        "onChange": function onChange(e) {
          var files = Array.from(e.target.files || []);
          if (!files.length) {
            return;
          }
          var action = uploadImage.action || getDefaultAction("uploadImage");
          action({
            files: files,
            name: uploadImage.name
          });
          e.target.value = "";
        },
        "hidden": true
      }), null), Vue.createVNode(tooltip_index.Tooltip, {
        "content": uploadImageText
      }, {
        "default": function _default() {
          return [Vue.createVNode(button_index.Button, {
            "theme": "default",
            "onClick": function onClick() {
              var _uploadImageRef$value;
              return (_uploadImageRef$value = uploadImageRef.value) === null || _uploadImageRef$value === void 0 ? void 0 : _uploadImageRef$value.click();
            },
            "shape": "circle",
            "variant": "text",
            "class": ["".concat(COMPONENT_NAME.value, "-sender__upload")]
          }, {
            "default": function _default() {
              return [Vue.createVNode(tdesignIconsVueNext.ImageIcon, null, null)];
            }
          })];
        }
      })]) : null;
      var buttonComponents = {
        uploadAttachment: uploadAttachmentButton,
        uploadImage: renderUploadImageButton
      };
      return Vue.createVNode(Vue.Fragment, null, [actions.filter(function (item) {
        return item.name === "uploadAttachment" || item.name === "uploadImage";
      }).map(function (item) {
        return buttonComponents[item.name];
      }), Vue.createVNode(button_index.Button, {
        "theme": "default",
        "size": "small",
        "variant": "text",
        "class": ["".concat(COMPONENT_NAME.value, "-sender__button__default"), textValue.value ? "" : "".concat(COMPONENT_NAME.value, "-sender__button--disabled")],
        "disabled": disabled.value || showStopBtn.value || !textValue.value
      }, {
        "default": function _default() {
          return [Vue.createVNode(tdesignIconsVueNext.SendFilledIcon, null, null)];
        }
      })]);
    };
    var renderSuffixIcon = function renderSuffixIcon() {
      var suffix = renderTNodeJSX("suffix", {
        params: {
          renderPresets: getDefaultSuffixIcon
        }
      });
      return suffix ? suffix : getDefaultSuffixIcon();
    };
    return function () {
      var _props2$textareaProps;
      return Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender")
      }, [Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender__header")
      }, [renderContent("default", "header")]), Vue.createVNode("div", {
        "class": ["".concat(COMPONENT_NAME.value, "-sender__textarea"), focusFlag.value ? "".concat(COMPONENT_NAME.value, "-sender__textarea--focus") : ""]
      }, [Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender__inner-header")
      }, [renderContent("default", "inner-header")]), Vue.createVNode(textarea_index.Textarea, Vue.mergeProps({
        "ref": senderTextarea,
        "value": textValue.value,
        "onChange": textChange,
        "disabled": disabled.value || showStopBtn.value
      }, _objectSpread({
        autosize: ((_props2$textareaProps = props2.textareaProps) === null || _props2$textareaProps === void 0 ? void 0 : _props2$textareaProps.autosize) || {
          minRows: 2,
          maxRows: 5
        }
      }, props2.textareaProps), {
        "onKeydown": keydownFn,
        "onKeyup": keyupFn,
        "onFocus": focusFn,
        "onBlur": blurFn,
        "onCompositionstart": compositionstartFn,
        "onCompositionend": compositionendFn
      }), null), Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender__footer")
      }, [Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender__mode")
      }, [renderContent("default", "prefix")]), Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender__button")
      }, [!showStopBtn.value && Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender__button__sendbtn"),
        "onClick": sendClick
      }, [renderSuffixIcon()]), showStopBtn.value && Vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "-sender__button__stopbtn")
      }, [Vue.createVNode(button_index.Button, {
        "variant": "text",
        "class": "".concat(COMPONENT_NAME.value, "-sender__button__default"),
        "onClick": handleStop
      }, {
        "default": function _default() {
          return [Vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-sender__button__stopicon")
          }, null)];
        }
      })])])])])]);
    };
  }
});

exports["default"] = _ChatSender;
//# sourceMappingURL=chat-sender.js.map
